// src/components/AMLList.jsx
import React, { useEffect, useState } from "react";
import api from "../api";
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Container,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TablePagination,
  Box,
  Typography,
} from "@mui/material";
import { useNavigate } from "react-router-dom";
import { SdfButton, SdfIcon } from "@waypoint/react-components";

export default function AMLList() {
  const [amlList, setAmlList] = useState([]);
  const [form, setForm] = useState({
    planNumber: "",
    status: "",
    complianceDate: "",
    comments: "",
  });
  const [open, setOpen] = useState(false);
  const [editId, setEditId] = useState(null);
  const [search, setSearch] = useState("");
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const navigate = useNavigate();

  const fetchAML = async () => {
    const res = await api.get("/AML");
    setAmlList(res.data);
  };

  useEffect(() => {
    fetchAML();
  }, []);

  const handleLogout = () => {
    localStorage.clear();
    delete api.defaults.headers.common["Authorization"];
    navigate("/");
  };

  const handleSave = async () => {
    const payload = {
      Plan_Number: form.planNumber,
      Status: form.status,
      Compliance_Date: form.complianceDate,
      Comments: form.comments,
    };

    if (editId) {
      await api.put(`/AML/${editId}`, payload);
    } else {
      await api.post("/AML", payload);
    }

    fetchAML();
    setOpen(false);
    setForm({ planNumber: "", status: "", complianceDate: "", comments: "" });
    setEditId(null);
  };

  const handleEdit = (aml) => {
    setForm({
      planNumber: aml.plan_Number || aml.Plan_Number || "",
      status: aml.status || aml.Status || "",
      complianceDate: (aml.compliance_Date || aml.Compliance_Date || "").toString().slice(0, 10),
      comments: aml.comments || aml.Comments || "",
    });
    setEditId(aml.aml_ID || aml.AML_ID);
    setOpen(true);
  };

  const handleDelete = async (id) => {
    await api.delete(`/AML/${id}`);
    fetchAML();
  };

  const filtered = amlList.filter((a) =>
    (a.plan_Number || a.Plan_Number || "")
      .toString()
      .toLowerCase()
      .includes(search.toLowerCase())
  );

  return (
    <Container maxWidth="lg" sx={{ py: 3 }}>
      {/* Page Header */}
      <Box
        sx={{
          mb: 2,
          display: "flex",
          alignItems: "center",
          gap: 2,
          justifyContent: "space-between",
        }}
      >
        <Box sx={{ display: "flex", alignItems: "center", gap: 1.25 }}>
          <SdfIcon icon="action-view-list" />
          <Typography variant="h5" fontWeight={700}>
            AML Records
          </Typography>
        </Box>

        <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
          <TextField
            size="small"
            label="Search by Plan Number"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
          <SdfButton
            action="standard"
            emphasis="primary"
            onClick={() => setOpen(true)}
            style={{ display: "inline-flex", gap: 8 }}
          >
            <SdfIcon icon="action-add" />
            Add AML
          </SdfButton>
          <SdfButton
            action="standard"
            emphasis="secondary"
            onClick={handleLogout}
            style={{ display: "inline-flex", gap: 6 }}
          >
            <SdfIcon icon="action-logout" />
            Logout
          </SdfButton>
        </Box>
      </Box>

      {/* Table */}
      <Box sx={{ borderRadius: 2, bgcolor: "#fff", border: "1px solid #e5e7eb" }}>
        <div style={{ maxHeight: 480, overflow: "auto" }}>
          <Table stickyHeader>
            <TableHead>
              <TableRow>
                <TableCell>AML_ID</TableCell>
                <TableCell>Plan Number</TableCell>
                <TableCell>Status</TableCell>
                <TableCell>Compliance Date</TableCell>
                <TableCell>Comments</TableCell>
                <TableCell align="right">Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filtered.length > 0 ? (
                filtered
                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  .map((a) => {
                    const id = a.aml_ID || a.AML_ID;
                    const plan = a.plan_Number || a.Plan_Number;
                    const status = a.status || a.Status;
                    const dateRaw = a.compliance_Date || a.Compliance_Date;
                    const comments = a.comments || a.Comments;

                    const date =
                      typeof dateRaw === "string"
                        ? dateRaw.slice(0, 10)
                        : dateRaw
                        ? new Date(dateRaw).toISOString().slice(0, 10)
                        : "";

                    return (
                      <TableRow key={id}>
                        <TableCell>{id}</TableCell>
                        <TableCell>{plan}</TableCell>
                        <TableCell>{status}</TableCell>
                        <TableCell>{date}</TableCell>
                        <TableCell>{comments}</TableCell>
                        <TableCell align="right" style={{ whiteSpace: "nowrap" }}>
                          <SdfButton
                            size="small"
                            action="standard"
                            emphasis="secondary"
                            onClick={() => handleEdit(a)}
                            style={{ marginRight: 6, display: "inline-flex", gap: 6, padding: "2px 8px" }}
                          >
                            <SdfIcon icon="action-edit" />
                            Edit
                          </SdfButton>
                          <SdfButton
                            size="small"
                            action="standard"
                            emphasis="secondary"
                            onClick={() => handleDelete(id)}
                            style={{ display: "inline-flex", gap: 6, padding: "2px 8px" }}
                          >
                            <SdfIcon icon="action-delete" />
                            Delete
                          </SdfButton>
                        </TableCell>
                      </TableRow>
                    );
                  })
              ) : (
                <TableRow>
                  <TableCell colSpan={6} align="center">
                    No records found
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>

        {/* Pagination */}
        <TablePagination
          rowsPerPageOptions={[5, 10, 25]}
          component="div"
          count={filtered.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={(e, newPage) => setPage(newPage)}
          onRowsPerPageChange={(e) => {
            setRowsPerPage(parseInt(e.target.value, 10));
            setPage(0);
          }}
        />
      </Box>

      {/* Modal Form */}
      <Dialog open={open} onClose={() => setOpen(false)} fullWidth maxWidth="sm">
        <DialogTitle>{editId ? "Edit AML" : "Add AML"}</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            label="Plan Number"
            margin="normal"
            value={form.planNumber}
            onChange={(e) => setForm({ ...form, planNumber: e.target.value })}
          />
          <TextField
            fullWidth
            label="Status"
            margin="normal"
            value={form.status}
            onChange={(e) => setForm({ ...form, status: e.target.value })}
          />
          <TextField
            fullWidth
            label="Compliance Date"
            type="date"
            margin="normal"
            InputLabelProps={{ shrink: true }}
            value={form.complianceDate}
            onChange={(e) => setForm({ ...form, complianceDate: e.target.value })}
          />
          <TextField
            fullWidth
            label="Comments"
            margin="normal"
            value={form.comments}
            onChange={(e) => setForm({ ...form, comments: e.target.value })}
          />
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 2 }}>
          <SdfButton
            action="standard"
            emphasis="secondary"
            onClick={() => setOpen(false)}
            style={{ display: "inline-flex", gap: 6 }}
          >
            <SdfIcon icon="action-close" />
            Cancel
          </SdfButton>
          <SdfButton
            action="standard"
            emphasis="primary"
            onClick={handleSave}
            style={{ display: "inline-flex", gap: 6 }}
          >
            <SdfIcon icon="action-save" />
            Save
          </SdfButton>
        </DialogActions>
      </Dialog>
    </Container>
  );
}