Got it! You want a fully dynamic, searchable, scrollable UI with real data shown in fields. Here's how we will fix and enhance the project:


---

Features to Add

1. Search Bar â€“ Search by Plan Number or Name.


2. Scroll with pagination / infinite scroll â€“ Large data sets should be scrollable.


3. Tabs (click & switch) â€“ AML, Trustee, and SP can be tabs inside one screen.


4. Real-time dynamic updates â€“ When you add/edit/delete, the table updates instantly.


5. Data visible correctly â€“ Ensure field mapping matches your API response.




---

Updated AMLPage.jsx with Search + Scroll + Tabs

We'll combine all three pages (AML, Trustee, SP) into one Tabbed Dashboard.

1. DashboardTabs.jsx

src/pages/DashboardTabs.jsx

import React, { useState } from "react";
import Layout from "../components/Layout";
import AMLTab from "./tabs/AMLTab";
import TrusteeTab from "./tabs/TrusteeTab";
import SPTab from "./tabs/SPTab";

export default function DashboardTabs() {
  const [activeTab, setActiveTab] = useState("aml");

  return (
    <Layout>
      <h1>PES Dashboard</h1>

      {/* Tabs */}
      <div style={{ display: "flex", marginBottom: "15px" }}>
        <button
          onClick={() => setActiveTab("aml")}
          style={{
            padding: "10px",
            background: activeTab === "aml" ? "#1976d2" : "#eee",
            color: activeTab === "aml" ? "#fff" : "#000",
            marginRight: "10px",
          }}
        >
          AML Trustee
        </button>
        <button
          onClick={() => setActiveTab("trustee")}
          style={{
            padding: "10px",
            background: activeTab === "trustee" ? "#1976d2" : "#eee",
            color: activeTab === "trustee" ? "#fff" : "#000",
            marginRight: "10px",
          }}
        >
          Trustee
        </button>
        <button
          onClick={() => setActiveTab("sp")}
          style={{
            padding: "10px",
            background: activeTab === "sp" ? "#1976d2" : "#eee",
            color: activeTab === "sp" ? "#fff" : "#000",
          }}
        >
          Service Providers
        </button>
      </div>

      {/* Dynamic Tab Content */}
      {activeTab === "aml" && <AMLTab />}
      {activeTab === "trustee" && <TrusteeTab />}
      {activeTab === "sp" && <SPTab />}
    </Layout>
  );
}


---

2. AMLTab.jsx (with search + scroll)

src/pages/tabs/AMLTab.jsx

import React, { useEffect, useState } from "react";
import api from "../../api";

export default function AMLTab() {
  const [rows, setRows] = useState([]);
  const [search, setSearch] = useState("");

  const fetchData = async () => {
    try {
      const res = await api.get("/AML");
      setRows(res.data);
    } catch (err) {
      console.error("AML fetch error:", err);
    }
  };

  const deleteRecord = async (id) => {
    await api.delete(`/AML/${id}`);
    fetchData();
  };

  useEffect(() => {
    fetchData();
  }, []);

  // Filter data dynamically by search
  const filteredRows = rows.filter(
    (row) =>
      row.planNumber?.toLowerCase().includes(search.toLowerCase()) ||
      row.category?.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div>
      {/* Search Bar */}
      <input
        type="text"
        placeholder="Search by Plan Number or Category..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        style={{
          padding: "8px",
          marginBottom: "10px",
          width: "300px",
          border: "1px solid #ccc",
        }}
      />

      {/* Scrollable Table */}
      <div style={{ maxHeight: "300px", overflowY: "auto" }}>
        <table
          border="1"
          style={{ width: "100%", borderCollapse: "collapse", textAlign: "left" }}
        >
          <thead style={{ background: "#1976d2", color: "#fff" }}>
            <tr>
              <th>Plan Number</th>
              <th>Category</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredRows.length > 0 ? (
              filteredRows.map((row) => (
                <tr key={row.id}>
                  <td>{row.planNumber || "N/A"}</td>
                  <td>{row.category || "N/A"}</td>
                  <td>{row.status || "N/A"}</td>
                  <td>
                    <button onClick={() => alert(JSON.stringify(row, null, 2))}>
                      View
                    </button>{" "}
                    <button onClick={() => deleteRecord(row.id)}>Delete</button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={4} style={{ textAlign: "center" }}>
                  No Records Found
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}


---

3. TrusteeTab.jsx & SPTab.jsx

These will be exactly same as AMLTab but calling api.get("/Trustee") and api.get("/SP") respectively, and filtering by Name / Plan_Number / Status.


---

4. App.js

Update App.js to use new dashboard:

import { Routes, Route } from "react-router-dom";
import Login from "./components/Login";
import Register from "./components/Register";
import DashboardTabs from "./pages/DashboardTabs";

function App() {
  return (
    <Routes>
      <Route path="/" element={<Login />} />
      <Route path="/register" element={<Register />} />
      <Route path="/dashboard" element={<DashboardTabs />} />
    </Routes>
  );
}

export default App;


---

What this gives you

âœ… Tabs to switch AML / Trustee / SP dynamically
âœ… Search bar for filtering in real time
âœ… Scrollable table with max-height
âœ… Real data fields visible (planNumber, category, status)
âœ… Delete + View Popup
âœ… Dynamic UI updates when actions performed


---

ðŸ”¥ Next Upgrade: Add Modal (Popup form) for Add & Edit, plus real-time updates with WebSockets.


---

ðŸ‘‰ Do you want me to give TrusteeTab.jsx & SPTab.jsx full code now with same features (search, scroll, delete)?
ðŸ‘‰ Should I also add "Add New" button with Popup Form for CRUD?

