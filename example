
namespace PES.WebAPI.Models
{
    public class SPModel
    {
        public string Name { get; set; }="";
        public string Service_Type { get; set; } = "";
        public int Trustee_ID { get; set; }
    }
}


using Microsoft.AspNetCore.Mvc;
using Dapper;
using PES.WebAPI.Data;
using PES.WebAPI.Models;

[ApiController]
[Route("api/[controller]")]
public class SPController : ControllerBase
{
    private readonly DapperContext _context;

    public SPController(DapperContext context)
    {
        _context = context;
    }

    // ➡ CREATE (POST)
    [HttpPost]
    public async Task<IActionResult> Create([FromBody] SPModel model)
    {
        using var conn = _context.CreateConnection();

        // Validate Trustee_ID exists
        var trusteeExists = await conn.ExecuteScalarAsync<int>(
            "SELECT COUNT(1) FROM Deepanshu_Trustee WHERE Trustee_ID = @Trustee_ID",
            new { Trustee_ID = model.Trustee_ID }
        );

        if (trusteeExists == 0)
        {
            return BadRequest($"Trustee_ID {model.Trustee_ID} does not exist.");
        }

        var sql = @"INSERT INTO Deepanshu_SP (Name, Service_Type, Trustee_ID)
                    VALUES (@Name, @Service_Type, @Trustee_ID)";

        await conn.ExecuteAsync(sql, model);

        return Ok("SP record inserted successfully");
    }

    // ➡ READ (GET All)
    [HttpGet]
    public async Task<IActionResult> GetAll()
    {
        using var conn = _context.CreateConnection();
        var sql = "SELECT * FROM Deepanshu_SP WITH (NOLOCK)";
        var data = await conn.QueryAsync(sql);
        return Ok(data);
    }

    // ➡ READ (GET by ID)
    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(int id)
    {
        using var conn = _context.CreateConnection();
        var sql = "SELECT * FROM Deepanshu_SP WITH (NOLOCK) WHERE SP_ID = @SP_ID";
        var sp = await conn.QueryFirstOrDefaultAsync(sql, new { SP_ID = id });

        if (sp == null)
            return NotFound($"SP record with ID {id} not found.");

        return Ok(sp);
    }

    // ➡ UPDATE (PUT)
    [HttpPut("{id}")]
    public async Task<IActionResult> Update(int id, [FromBody] SPModel model)
    {
        using var conn = _context.CreateConnection();

        // Check if SP record exists
        var exists = await conn.ExecuteScalarAsync<int>(
            "SELECT COUNT(1) FROM Deepanshu_SP WHERE SP_ID = @SP_ID", new { SP_ID = id });

        if (exists == 0)
            return NotFound($"SP record with ID {id} not found.");

        // Check Trustee_ID exists
        var trusteeExists = await conn.ExecuteScalarAsync<int>(
            "SELECT COUNT(1) FROM Deepanshu_Trustee WHERE Trustee_ID = @Trustee_ID",
            new { Trustee_ID = model.Trustee_ID });

        if (trusteeExists == 0)
            return BadRequest($"Trustee_ID {model.Trustee_ID} does not exist.");

        var sql = @"UPDATE Deepanshu_SP 
                    SET Name = @Name, Service_Type = @Service_Type, Trustee_ID = @Trustee_ID 
                    WHERE SP_ID = @SP_ID";

        await conn.ExecuteAsync(sql, new
        {
            model.Name,
            model.Service_Type,
            model.Trustee_ID,
            SP_ID = id
        });

        return Ok($"SP record with ID {id} updated successfully");
    }

    // ➡ DELETE
    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(int id)
    {
        using var conn = _context.CreateConnection();

        var sql = "DELETE FROM Deepanshu_SP WHERE SP_ID = @SP_ID";
        var rows = await conn.ExecuteAsync(sql, new { SP_ID = id });

        if (rows == 0)
            return NotFound($"SP record with ID {id} not found.");

        return Ok($"SP record with ID {id} deleted successfully");
    }
}
import React, { useEffect, useState } from "react";
import api from "../api";
import {
  Button,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Container,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TablePagination,
} from "@mui/material";

export default function SPList() {
  const [spList, setSpList] = useState([]);
  const [form, setForm] = useState({
    name: "",
    serviceType: "",
    trusteeId: "",
  });
  const [open, setOpen] = useState(false);
  const [editId, setEditId] = useState(null);
  const [search, setSearch] = useState("");
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const fetchSP = async () => {
    const res = await api.get("/sp");
    setSpList(res.data);
  };

  useEffect(() => {
    fetchSP();
  }, []);

  const handleSave = async () => {
    if (editId) {
      await api.put(`/sp/${editId}`, form);
    } else {
      await api.post("/sp", form);
    }
    fetchSP();
    setOpen(false);
    setForm({ name: "", serviceType: "", trusteeId: "" });
    setEditId(null);
  };

  const handleEdit = (sp) => {
    setForm({
      name: sp.name || sp.Name,
      serviceType: sp.service_Type || sp.Service_Type,
      trusteeId: sp.trustee_ID || sp.Trustee_ID,
    });
    setEditId(sp.sp_ID || sp.SP_ID);
    setOpen(true);
  };

  const handleDelete = async (id) => {
    await api.delete(`/sp/${id}`);
    fetchSP();
  };

  const filtered = spList.filter((sp) =>
    (sp.name || sp.Name || "")
      .toLowerCase()
      .includes(search.toLowerCase())
  );

  return (
    <Container>
      <h2>Service Provider Records</h2>
      <Button variant="contained" onClick={() => setOpen(true)}>
        Add SP
      </Button>
      <TextField
        label="Search by Name"
        size="small"
        style={{ margin: "10px" }}
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />

      <div style={{ maxHeight: "400px", overflow: "auto" }}>
        <Table stickyHeader>
          <TableHead>
            <TableRow>
              <TableCell>SP_ID</TableCell>
              <TableCell>Name</TableCell>
              <TableCell>Service Type</TableCell>
              <TableCell>Trustee_ID</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filtered.length > 0 ? (
              filtered
                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                .map((sp) => (
                  <TableRow key={sp.sp_ID || sp.SP_ID}>
                    <TableCell>{sp.sp_ID || sp.SP_ID}</TableCell>
                    <TableCell>{sp.name || sp.Name}</TableCell>
                    <TableCell>
                      {sp.service_Type || sp.Service_Type}
                    </TableCell>
                    <TableCell>{sp.trustee_ID || sp.Trustee_ID}</TableCell>
                    <TableCell>
                      <Button onClick={() => handleEdit(sp)}>Edit</Button>
                      <Button
                        color="error"
                        onClick={() => handleDelete(sp.sp_ID || sp.SP_ID)}
                      >
                        Delete
                      </Button>
                    </TableCell>
                  </TableRow>
                ))
            ) : (
              <TableRow>
                <TableCell colSpan={5} align="center">
                  No records found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      {/* Pagination */}
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={filtered.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={(e, newPage) => setPage(newPage)}
        onRowsPerPageChange={(e) => {
          setRowsPerPage(parseInt(e.target.value, 10));
          setPage(0);
        }}
      />

      {/* Modal Form */}
      <Dialog open={open} onClose={() => setOpen(false)}>
        <DialogTitle>{editId ? "Edit Service Provider" : "Add Service Provider"}</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            label="Name"
            margin="normal"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
          />
          <TextField
            fullWidth
            label="Service Type"
            margin="normal"
            value={form.serviceType}
            onChange={(e) => setForm({ ...form, serviceType: e.target.value })}
          />
          <TextField
            fullWidth
            label="Trustee ID"
            margin="normal"
            value={form.trusteeId}
            onChange={(e) => setForm({ ...form, trusteeId: e.target.value })}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpen(false)}>Cancel</Button>
          <Button variant="contained" onClick={handleSave}>
            Save
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
}
