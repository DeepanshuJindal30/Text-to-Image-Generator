using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using PES.WebAPI.Models;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace PES.WebAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly IConfiguration _configuration;

        public AuthController(UserManager<IdentityUser> userManager,
                              SignInManager<IdentityUser> signInManager,
                              IConfiguration configuration)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _configuration = configuration;
        }

        // REGISTER USER
        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterRequest model)
        {
            if (string.IsNullOrWhiteSpace(model.Email) || !IsValidEmail(model.Email))
                return BadRequest("Invalid email format. Please use a valid email address.");

            var user = new IdentityUser { UserName = model.Username, Email = model.Email };
            var result = await _userManager.CreateAsync(user, model.Password);

            if (!result.Succeeded)
                return BadRequest(result.Errors);

            // Add role if specified
            if (!string.IsNullOrEmpty(model.Role))
                await _userManager.AddToRoleAsync(user, model.Role);

            return Ok("User registered successfully!");
        }
           private bool IsValidEmail(string email)
        {
            try
            {
                var addr = new System.Net.Mail.MailAddress(email);
                return addr.Address == email;
            }
            catch
            {
                return false;
            }
        }

        // LOGIN USER
        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginRequest model)
        {
            var user = await _userManager.FindByNameAsync(model.Username);
            if (user == null)
                return Unauthorized("User not found");

            var result = await _signInManager.CheckPasswordSignInAsync(user, model.Password, false);
            if (!result.Succeeded)
                return Unauthorized("Invalid credentials");

            // Get user roles
            var roles = await _userManager.GetRolesAsync(user);

            // Generate JWT
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]!);

            var token = tokenHandler.CreateToken(new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                    new Claim(ClaimTypes.Name, user.UserName!),
                    new Claim(ClaimTypes.NameIdentifier, user.Id),
                }.Concat(roles.Select(r => new Claim(ClaimTypes.Role, r)))),
                Expires = DateTime.UtcNow.AddHours(1),
                SigningCredentials = new SigningCredentials(
                    new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256)
            });

            return Ok(new LoginResponse
            {
                Token = tokenHandler.WriteToken(token),
                Roles = roles
            });
        }
    }
}


namespace PES.WebAPI.Models
{
    public class RegisterRequest
    {
        public string Username { get; set; } = "";
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public string Role { get; set; } = "User"; // optional
    }

    public class LoginRequest
    {
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }

    public class LoginResponse
    {
        public string Token { get; set; } = "";
        public IEnumerable<string> Roles { get; set; } = new List<string>();
    }
}

import React, { useState } from "react";
import {
  Button,
  TextField,
  Container,
  Typography,
  Alert,
  Box,
  MenuItem
} from "@mui/material";
import { useNavigate } from "react-router-dom";
import api from "../api";
import { useDispatch } from "react-redux";
import { setAuth } from "../redux/slices/authSlice";

export default function Auth() {
  const [isLogin, setIsLogin] = useState(true);
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState(""); // for registration
  const [password, setPassword] = useState("");
  const [role, setRole] = useState("User"); // default role for registration
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const toggleMode = () => {
    setIsLogin(!isLogin);
    setError("");
    setUsername("");
    setEmail("");
    setPassword("");
  };

  const handleSubmit = async () => {
    setError("");

    if (!username || !password || (!isLogin && !email)) {
      setError("Please fill all required fields");
      return;
    }

    try {
      if (isLogin) {
        const res = await api.post("/auth/login", { username, password });

        const token = res.data.token;
        const roles = res.data.roles;

        // Store in localStorage
        localStorage.setItem("token", token);
        localStorage.setItem("roles", JSON.stringify(roles));

        // Set auth header globally
        api.defaults.headers.common["Authorization"] = `Bearer ${token}`;

        // Update Redux store
        dispatch(setAuth({ token, roles }));

        alert("Login Successful");

        // Redirect based on role
        if (roles.includes("Admin")) navigate("/aml");
        else if (roles.includes("Manager")) navigate("/trustee");
        else navigate("/sp");

      } else {
        // Registration validations
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d]).{8,}$/;

        if (!emailRegex.test(email)) {
          setError("Enter a valid email");
          return;
        }

        if (!passwordRegex.test(password)) {
          setError("Password must include uppercase, lowercase, number, special char");
          return;
        }

        await api.post("/auth/register", { username, email, password, role });

        alert("Registration successful. You can now log in.");
        setIsLogin(true);
      }
    } catch (err) {
      setError(err.response?.data || err.message || "Something went wrong");
    }
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 5 }}>
      <Typography variant="h4" gutterBottom align="center">
        {isLogin ? "Login" : "Register"}
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      <TextField
        label="Username"
        fullWidth
        margin="normal"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />

      {!isLogin && (
        <TextField
          label="Email"
          fullWidth
          margin="normal"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
      )}

      <TextField
        label="Password"
        type="password"
        fullWidth
        margin="normal"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />

      {!isLogin && (
        <TextField
          label="Role"
          select
          fullWidth
          margin="normal"
          value={role}
          onChange={(e) => setRole(e.target.value)}
        >
          <MenuItem value="Admin">Admin</MenuItem>
          <MenuItem value="Manager">Manager</MenuItem>
          <MenuItem value="User">User</MenuItem>
        </TextField>
      )}

      <Button
        variant="contained"
        fullWidth
        sx={{ mt: 2 }}
        onClick={handleSubmit}
      >
        {isLogin ? "Login" : "Register"}
      </Button>

      <Box sx={{ mt: 2, textAlign: "center" }}>
        <Button variant="text" onClick={toggleMode}>
          {isLogin
            ? "Don't have an account? Register"
            : "Already have an account? Login"}
        </Button>
      </Box>
    </Container>
  );
}
