[import React, { useState } from "react";
import { Button, TextField, Container, Typography, Alert } from "@mui/material";
import api from "../api"; // axios instance
import { useNavigate } from "react-router-dom";

export default function Register() {
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [role, setRole] = useState("User"); // default role
  const [error, setError] = useState(""); // error message
  const navigate = useNavigate();

  const handleRegister = async () => {
    setError(""); // clear error

    // ‚úÖ Email format validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      setError("Please enter a valid email address");
      return;
    }

    // ‚úÖ Password validation (same as backend)
    const passwordRegex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d]).{8,}$/;
    if (!passwordRegex.test(password)) {
      setError(
        "Password must be at least 8 characters, include uppercase, lowercase, number, and special character."
      );
      return;
    }

    try {
      await api.post("/auth/register", { username, email, password, role });
      alert("User Registered Successfully");
      navigate("/"); // redirect to login
    } catch (err) {
      setError(
        "Registration Failed: " +
          (err.response?.data || err.message)
      );
    }
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 5 }}>
      <Typography variant="h4" gutterBottom align="center">
        Register
      </Typography>

      {/* Show error message if any */}
      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

      <TextField
        label="Username"
        fullWidth
        margin="normal"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />

      <TextField
        label="Email"
        fullWidth
        margin="normal"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />

      <TextField
        label="Password"
        type="password"
        fullWidth
        margin="normal"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />

      <TextField
        label="Role (Admin/User)"
        fullWidth
        margin="normal"
        value={role}
        onChange={(e) => setRole(e.target.value)}
      />

      <Button
        variant="contained"
        fullWidth
        sx={{ mt: 2, py: 1 }}
        onClick={handleRegister}
      >
        Register
      </Button>
    </Container>
  );
}.


---

1Ô∏è‚É£ Update Identity Options (Password Rules)

In Program.cs, update Identity configuration:

builder.Services.AddIdentity<AppUser, IdentityRole>(options =>
{
    // Email validation
    options.User.RequireUniqueEmail = true;

    // Password constraints
    options.Password.RequiredLength = 8;           // Minimum length
    options.Password.RequireDigit = true;          // At least 1 number
    options.Password.RequireUppercase = true;      // At least 1 uppercase letter
    options.Password.RequireLowercase = true;      // At least 1 lowercase letter
    options.Password.RequireNonAlphanumeric = true; // At least 1 special character
})
.AddEntityFrameworkStores<AppDbContext>()
.AddDefaultTokenProviders();


---

2Ô∏è‚É£ AuthController ‚Äì Validation in Register

Your Register method will now handle email and password validation:

[HttpPost("register")]
public async Task<IActionResult> Register(string email, string password)
{
    // Email format validation
    if (string.IsNullOrWhiteSpace(email) || !IsValidEmail(email))
        return BadRequest("Invalid email format. Please use a valid email address.");

    // Create user
    var user = new AppUser { UserName = email, Email = email };
    var result = await _userManager.CreateAsync(user, password);

    // Handle Identity password validation errors
    if (!result.Succeeded)
        return BadRequest(result.Errors.Select(e => e.Description));

    return Ok("User registered successfully");
}

private bool IsValidEmail(string email)
{
    try
    {
        var addr = new System.Net.Mail.MailAddress(email);
        return addr.Address == email;
    }
    catch
    {
        return false;
    }
}


---

3Ô∏è‚É£ Example Error Messages

If user tries with a weak password (e.g. abc123):

400 Bad Request: [
    "Passwords must be at least 8 characters.",
    "Passwords must have at least one uppercase ('A'-'Z').",
    "Passwords must have at least one non alphanumeric character."
]


---

4Ô∏è‚É£ Frontend Validation (Optional)

In React, validate before hitting the API:

const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d]).{8,}$/;

if (!passwordRegex.test(password)) {
  alert("Password must be at least 8 characters, include uppercase, lowercase, number, and special character.");
  return;
}


---

‚úÖ Result

1. Email must be valid & unique.


2. Password must:

Be at least 8 characters

Contain at least 1 uppercase letter

Contain at least 1 lowercase letter

Contain at least 1 number

Contain at least 1 special character





---

üëâ Do you also want me to add role assignment (Admin/Trustee) during registration so we can apply role-based access on APIs and frontend? Or should we move to frontend JWT login flow with tokens saved in Redux?


üî• Awesome! Let‚Äôs build a professional, modern UI for your React frontend using Material UI (MUI), charts, cards, filters, and modals ‚Äì not just plain tables.


---

1Ô∏è‚É£ UI Layout ‚Äì What We‚Äôll Build

We'll create a Dashboard Layout with:

1. Sidebar Navigation (Plans, AML, Uploads)


2. Topbar with user info & logout


3. Dashboard with cards, charts & tables


4. Beautiful Modals & Filters instead of plain CRUD forms




---

2Ô∏è‚É£ Install Required UI Libraries

npm install @mui/material @mui/icons-material recharts

Material UI ‚Üí components

MUI Icons ‚Üí icons

Recharts ‚Üí charts



---

3Ô∏è‚É£ Dashboard Layout

a) Create Layout.js

import React from 'react';
import { Box, Drawer, List, ListItemButton, ListItemIcon, ListItemText, AppBar, Toolbar, Typography, IconButton } from '@mui/material';
import { Dashboard, TableChart, CloudUpload, Logout } from '@mui/icons-material';

const drawerWidth = 220;

const Layout = ({ children, onLogout }) => {
  return (
    <Box sx={{ display: 'flex' }}>
      {/* Sidebar */}
      <Drawer variant="permanent" sx={{ width: drawerWidth, '& .MuiDrawer-paper': { width: drawerWidth, bgcolor: '#1E293B', color: 'white' } }}>
        <Typography variant="h5" sx={{ p: 2, textAlign: 'center', fontWeight: 'bold' }}>PES Portal</Typography>
        <List>
          <ListItemButton>
            <ListItemIcon><Dashboard sx={{ color: 'white' }} /></ListItemIcon>
            <ListItemText primary="Dashboard" />
          </ListItemButton>
          <ListItemButton>
            <ListItemIcon><TableChart sx={{ color: 'white' }} /></ListItemIcon>
            <ListItemText primary="Plans" />
          </ListItemButton>
          <ListItemButton>
            <ListItemIcon><CloudUpload sx={{ color: 'white' }} /></ListItemIcon>
            <ListItemText primary="Uploads" />
          </ListItemButton>
        </List>
      </Drawer>

      {/* Topbar */}
      <Box component="main" sx={{ flexGrow: 1 }}>
        <AppBar position="sticky" sx={{ bgcolor: '#334155', boxShadow: 'none' }}>
          <Toolbar sx={{ display: 'flex', justifyContent: 'space-between' }}>
            <Typography variant="h6">PES Dashboard</Typography>
            <IconButton onClick={onLogout} color="inherit">
              <Logout />
            </IconButton>
          </Toolbar>
        </AppBar>

        {/* Page Content */}
        <Box sx={{ p: 3, minHeight: '90vh', bgcolor: '#F8FAFC' }}>
          {children}
        </Box>
      </Box>
    </Box>
  );
};

export default Layout;


---

4Ô∏è‚É£ Modern Dashboard Page

b) Update DashboardPage.js

import React, { useEffect, useState } from 'react';
import { Grid, Card, CardContent, Typography, LinearProgress, Paper } from '@mui/material';
import axios from 'axios';
import Layout from '../components/Layout';
import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';

const DashboardPage = ({ onLogout }) => {
  const [counts, setCounts] = useState({ plans: 0, amlPlans: 0, uploads: 0 });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchCounts = async () => {
      try {
        const plans = await axios.get('https://localhost:5041/api/planinfo');
        const amlPlans = await axios.get('https://localhost:5041/api/trusteeamlplans');
        const uploads = await axios.get('https://localhost:5041/api/trusteeamluploaddata');

        setCounts({
          plans: plans.data.length,
          amlPlans: amlPlans.data.length,
          uploads: uploads.data.length
        });
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchCounts();
  }, []);

  const chartData = [
    { name: 'Plans', value: counts.plans },
    { name: 'AML Plans', value: counts.amlPlans },
    { name: 'Uploads', value: counts.uploads }
  ];
  const COLORS = ['#3B82F6', '#F59E0B', '#EF4444'];

  return (
    <Layout onLogout={onLogout}>
      {loading && <LinearProgress sx={{ mb: 2 }} />}

      {/* Cards */}
      <Grid container spacing={2} sx={{ mb: 3 }}>
        {Object.entries(counts).map(([key, value]) => (
          <Grid item xs={12} md={4} key={key}>
            <Card sx={{ textAlign: 'center', p: 2, bgcolor: '#FFFFFF', borderRadius: 3, boxShadow: 3 }}>
              <CardContent>
                <Typography variant="h6" sx={{ textTransform: 'capitalize' }}>{key}</Typography>
                <Typography variant="h4" color="primary">{value}</Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Pie Chart */}
      <Paper sx={{ p: 3, borderRadius: 3 }}>
        <Typography variant="h6" sx={{ mb: 2 }}>Data Distribution</Typography>
        <ResponsiveContainer width="100%" height={300}>
          <PieChart>
            <Pie data={chartData} dataKey="value" outerRadius={120} fill="#8884d8" label>
              {chartData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={COLORS[index]} />
              ))}
            </Pie>
            <Tooltip />
          </PieChart>
        </ResponsiveContainer>
      </Paper>
    </Layout>
  );
};

export default DashboardPage;


---

5Ô∏è‚É£ Beautiful Tables with Filters & Modals

We‚Äôll replace TrusteeList.js table with:

Search bar & filters (PRODUCT_ID, FILE_SET)

Expandable rows / view details modal


(I‚Äôll add this in the next step if you approve the layout above)


---

What This UI Includes

‚úÖ Modern sidebar + topbar
‚úÖ Cards with counts
‚úÖ Pie chart with data distribution
‚úÖ Material UI theme with shadows & colors
‚úÖ Easy to add filters & modals


---

üëâ Do you want me to now add advanced table UI with filters, expandable rows & modals (so users can view details beautifully instead of plain rows)?
Or should I add separate pages for AML Plans & Uploads with charts and filters?



