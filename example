// src/components/Login.jsx
import React, { useState } from "react";
import {
  Container, Typography, TextField, IconButton, InputAdornment, Box
} from "@mui/material";
import api from "../api";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { setAuth } from "../redux/slices/authSlice";
import { SdfButton, SdfIcon } from "@waypoint/react-components";

export default function Login() {
  const [usernameOrEmail, setUsernameOrEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPwd, setShowPwd] = useState(false);
  const [busy, setBusy] = useState(false);

  const navigate = useNavigate();
  const dispatch = useDispatch();

  const canSubmit = usernameOrEmail.trim() !== "" && password !== "" && !busy;

  const submit = async () => {
    if (!canSubmit) return;
    try {
      setBusy(true);
      const res = await api.post("/auth/login", {
        usernameOrEmail,            // âœ… matches backend model
        password,
      });

      const { token, roles } = res.data;
      localStorage.setItem("token", token);
      localStorage.setItem("roles", JSON.stringify(roles));
      api.defaults.headers.common["Authorization"] = `Bearer ${token}`;
      dispatch(setAuth({ token, roles }));

      alert("Login Successful");
      if (roles?.includes("Admin")) navigate("/aml");
      else if (roles?.includes("Manager")) navigate("/trustee");
      else navigate("/sp");
    } catch (err) {
      alert("Login Failed: " + (err.response?.data || err.message));
    } finally {
      setBusy(false);
    }
  };

  const onKeyDown = (e) => {
    if (e.key === "Enter") submit();
  };

  return (
    <Container maxWidth="sm" sx={{ py: 6 }}>
      <Box sx={{ display: "flex", alignItems: "center", gap: 1, mb: 3, justifyContent: "center" }}>
        <SdfIcon icon="action-login" />
        <Typography variant="h5" fontWeight={600}>Login</Typography>
      </Box>

      <Box
        sx={{
          p: 3,
          borderRadius: 2,
          bgcolor: "#ffffff",
          boxShadow: "0 8px 24px rgba(0,0,0,0.08)",
          border: "1px solid rgba(0,0,0,0.06)",
        }}
      >
        {/* Username/Email */}
        <TextField
          label="Username or Email"
          fullWidth
          sx={{ mb: 2 }}
          value={usernameOrEmail}
          autoComplete="username"
          onChange={(e) => setUsernameOrEmail(e.target.value)}
          onKeyDown={onKeyDown}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SdfIcon icon="contact-card" />
              </InputAdornment>
            ),
          }}
        />

        {/* Password (with show/hide) */}
        <TextField
          label="Password"
          fullWidth
          sx={{ mb: 2 }}
          type={showPwd ? "text" : "password"}
          value={password}
          autoComplete="current-password"
          onChange={(e) => setPassword(e.target.value)}
          onKeyDown={onKeyDown}
          InputProps={{
            endAdornment: (
              <InputAdornment position="end">
                <IconButton
                  aria-label={showPwd ? "hide password" : "show password"}
                  onClick={() => setShowPwd((s) => !s)}
                  edge="end"
                >
                  <span style={{ display: "inline-flex" }}>
                    <SdfIcon icon={showPwd ? "action-hide" : "action-show"} />
                  </span>
                </IconButton>
              </InputAdornment>
            ),
          }}
        />

        {/* Submit */}
        <SdfButton
          id="login-button"
          emphasis="primary"
          action="standard"
          disabled={!canSubmit}
          onClick={submit}
          style={{ width: "100%", justifyContent: "center", gap: 8 }}
        >
          <SdfIcon icon="action-login" />
          Login
        </SdfButton>
      </Box>

      <Box sx={{ display: "flex", justifyContent: "center", mt: 2, gap: 1 }}>
        <SdfIcon icon="action-help" />
        <Typography variant="body2" color="text.secondary">
          Use your registered username or email address.
        </Typography>
      </Box>
    </Container>
  );
}