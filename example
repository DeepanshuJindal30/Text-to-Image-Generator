Ah, got it — you’re asking “why also” (i.e., why these were flagged as bugs by Sonar/React/ESLint).
Let me break it down clearly 👇


---

🔹 Why Sonar/React flagged these issues

1. .map() without return

map is meant to transform an array → always expects a return.

If you don’t return, Sonar flags it because .forEach() is the correct tool for side effects.



2. Expected return in arrow function

In .map(), .filter(), .reduce(), etc., the callback must always return something.

If there’s a code path without return, it’s flagged as incomplete.



3. == vs ===

== allows type coercion (e.g., 0 == '0' → true).

Can lead to hidden bugs, so Sonar enforces strict equality (===).



4. Missing radix in parseInt

Without radix, parseInt("08") may be interpreted differently (octal vs decimal).

Radix ensures consistent behavior across browsers.



5. Unused variables (backToCopy)

Wasted memory & confusing for readers.

Sonar flags anything unused → should be removed.



6. new Array()

Risk of creating sparse arrays (new Array(5) creates empty slots).

[] is safer and clearer.



7. Duplicate props in JSX

Example: <input onBlur={a} onBlur={b} /> → which one should React use?

Sonar flags to avoid confusion.



8. target="_blank" without rel

Security risk → opener page could hijack parent window (reverse tabnabbing).

Adding rel="noopener noreferrer" prevents this.



9. Unreachable code

Two returns inside same block means second one never runs.

Sonar flags unreachable code → must restructure.



10. filter vs find



filter returns array, find returns single element.

If only one element is needed, filter is inefficient & misleading → Sonar suggests find.



---

👉 So basically, Sonar isn’t just nitpicking.
It’s making sure your code is:

Correct (no type coercion, no sparse arrays, no dead code).

Safe (security with rel, radix consistency).

Efficient (use find vs filter).

Clean (no unused vars, no duplicate props).



---

Would you like me to create a one-liner explanation list for each bug (like “Why flagged: … | Fix: …”) so you can use it directly in your project documentation / manager update?

