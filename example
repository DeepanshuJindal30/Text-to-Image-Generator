
using Microsoft.AspNetCore.Mvc;
using Dapper;
using PES.WebAPI.Data;
using PES.WebAPI.Models;

[ApiController]
[Route("api/[controller]")]
public class AMLController : ControllerBase
{
    private readonly DapperContext _context;

    public AMLController(DapperContext context)
    {
        _context = context;
    }

    // ➡ CREATE (POST)
    [HttpPost]
    public async Task<IActionResult> Create([FromBody] AMLModel model)
    {
        using var conn = _context.CreateConnection();
        var sql = @"INSERT INTO Deepanshu_AML (Plan_Number, Status, Compliance_Date, Comments)
                    VALUES (@Plan_Number, @Status, @Compliance_Date, @Comments)";
        await conn.ExecuteAsync(sql, model);
        return Ok("AML record inserted successfully");
    }

    // ➡ READ (GET All)
    [HttpGet]
    public async Task<IActionResult> GetAll()
    {
        using var conn = _context.CreateConnection();
        var sql = "SELECT * FROM Deepanshu_AML WITH (NOLOCK)";
        var data = await conn.QueryAsync(sql);
        return Ok(data);
    }

    // ➡ READ (GET by ID)
    [HttpGet("{id}")]
    public async Task<IActionResult> GetById(int id)
    {
        using var conn = _context.CreateConnection();
        var sql = "SELECT * FROM Deepanshu_AML WITH (NOLOCK) WHERE AML_ID = @AML_ID";
        var aml = await conn.QueryFirstOrDefaultAsync(sql, new { AML_ID = id });

        if (aml == null)
            return NotFound($"AML record with ID {id} not found.");

        return Ok(aml);
    }

    // ➡ UPDATE (PUT)
    [HttpPut("{id}")]
    public async Task<IActionResult> Update(int id, [FromBody] AMLModel model)
    {
        using var conn = _context.CreateConnection();

        var exists = await conn.ExecuteScalarAsync<int>(
            "SELECT COUNT(1) FROM Deepanshu_AML WHERE AML_ID = @AML_ID", new { AML_ID = id });

        if (exists == 0)
            return NotFound($"AML record with ID {id} not found.");

        var sql = @"UPDATE Deepanshu_AML 
                    SET Plan_Number = @Plan_Number, Status = @Status, Compliance_Date = @Compliance_Date, Comments = @Comments
                    WHERE AML_ID = @AML_ID";

        await conn.ExecuteAsync(sql, new
        {
            model.Plan_Number,
            model.Status,
            model.Compliance_Date,
            model.Comments,
            AML_ID = id
        });

        return Ok($"AML record with ID {id} updated successfully");
    }

    // ➡ DELETE
    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(int id)
    {
        using var conn = _context.CreateConnection();
        var sql = "DELETE FROM Deepanshu_AML WHERE AML_ID = @AML_ID";
        var rows = await conn.ExecuteAsync(sql, new { AML_ID = id });

        if (rows == 0)
            return NotFound($"AML record with ID {id} not found.");

        return Ok($"AML record with ID {id} deleted successfully");
    }
}

namespace PES.WebAPI.Models
{
    public class AMLModel
    {
        public string Plan_Number { get; set; }="";
        public string Status { get; set; } = "";
        public DateTime? Compliance_Date { get; set; }
        public string Comments { get; set; } = "";
    }
}
using Microsoft.Data.SqlClient;
using System.Data;

namespace PES.WebAPI.Data
{
    public class DapperContext
    {
        private readonly string _connectionString;

        public DapperContext(IConfiguration configuration)
        {
             _connectionString = configuration.GetConnectionString("Database")??throw new InvalidOperationException("Database connection is missing");
           
        }

        public IDbConnection CreateConnection()
        {
           
            return new SqlConnection(_connectionString);
        }
    }
}using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;

namespace PES.WebAPI.Data
{
    public class ApplicationDbContext : IdentityDbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }
    }
}
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using PES.WebAPI.Data;



var builder = WebApplication.CreateBuilder(args);

// 1. Add DbContext for Identity
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("Database")));

// 2. Add Identity
builder.Services.AddIdentity<IdentityUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultTokenProviders();

// 3. Add JWT Authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = false,
        ValidateAudience = false,
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(
            Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]!))
    };
});


// Services
builder.Services.AddAuthorization();
builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSingleton<DapperContext>();

builder.Services.AddCors(options => options.AddPolicy("AllowReactApp", p => p.WithOrigins("http://localhost:3000").
AllowAnyMethod().AllowAnyHeader()));
builder.Services.AddSwaggerGen();
builder.Services.AddControllers();

var app = builder.Build();



app.UseCors("AllowReactApp");
app.UseAuthentication();
app.UseAuthorization();
app.UseSwagger();
app.UseSwaggerUI();
app.UseDeveloperExceptionPage();
app.MapControllers();
app.Run();
import React, { useEffect, useMemo, useState } from "react";
import api from "../api";
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Container,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TablePagination,
  Box,
  Typography,
  Grid,
} from "@mui/material";
import { useNavigate } from "react-router-dom";
import { SdfButton, SdfIcon, SdfCard, SdfCardHeader, SdfCardFooter } from "@waypoint/react-components";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from "recharts";

export default function AMLList() {
  const [amlList, setAmlList] = useState([]);
  const [form, setForm] = useState({
    planNumber: "",
    status: "",
    complianceDate: "",
    comments: "",
  });
  const [open, setOpen] = useState(false);
  const [editId, setEditId] = useState(null);
  const [search, setSearch] = useState("");
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const navigate = useNavigate();

  const fetchAML = async () => {
    const res = await api.get("/AML");
    setAmlList(res.data);
  };

  useEffect(() => {
    fetchAML();
  }, []);

  const handleLogout = () => {
    localStorage.clear();
    delete api.defaults.headers.common["Authorization"];
    navigate("/");
  };

  const handleSave = async () => {
    const payload = {
      Plan_Number: form.planNumber,
      Status: form.status,
      Compliance_Date: form.complianceDate,
      Comments: form.comments,
    };

    if (editId) {
      await api.put(`/AML/${editId}`, payload);
    } else {
      await api.post("/AML", payload);
    }

    fetchAML();
    setOpen(false);
    setForm({ planNumber: "", status: "", complianceDate: "", comments: "" });
    setEditId(null);
  };

  const handleEdit = (aml) => {
    setForm({
      planNumber: aml.plan_Number || aml.Plan_Number || "",
      status: aml.status || aml.Status || "",
      complianceDate: (aml.compliance_Date || aml.Compliance_Date || "").toString().slice(0, 10),
      comments: aml.comments || aml.Comments || "",
    });
    setEditId(aml.aml_ID || aml.AML_ID);
    setOpen(true);
  };

  const handleDelete = async (id) => {
    await api.delete(`/AML/${id}`);
    fetchAML();
  };

  const filtered = useMemo(
    () =>
      amlList.filter((a) =>
        (a.plan_Number || a.Plan_Number || "")
          .toString()
          .toLowerCase()
          .includes(search.toLowerCase())
      ),
    [amlList, search]
  );

  // ----- Dashboard data (computed from filtered list) -----
  const { total, compliant, pending, other, statusChart } = useMemo(() => {
    const totalCount = filtered.length;
    const statusCounts = filtered.reduce((acc, row) => {
      const s = (row.status || row.Status || "Unknown").toString().trim();
      const key =
        /compliant/i.test(s)
          ? "Compliant"
          : /pending/i.test(s)
          ? "Pending"
          : s || "Other";
      acc[key] = (acc[key] || 0) + 1;
      return acc;
    }, {});
    const compliantCount = statusCounts["Compliant"] || 0;
    const pendingCount = statusCounts["Pending"] || 0;
    const otherCount = totalCount - compliantCount - pendingCount;

    // Build bar chart data (top 6 statuses by frequency)
    const chartData = Object.entries(statusCounts)
      .map(([name, value]) => ({ name, value }))
      .sort((a, b) => b.value - a.value)
      .slice(0, 6);

    return {
      total: totalCount,
      compliant: compliantCount,
      pending: pendingCount,
      other: otherCount,
      statusChart: chartData,
    };
  }, [filtered]);

  // Export CSV of filtered rows
  const handleExportCsv = () => {
    const headers = ["AML_ID", "Plan_Number", "Status", "Compliance_Date", "Comments"];
    const rows = filtered.map((a) => {
      const id = a.aml_ID || a.AML_ID || "";
      const plan = a.plan_Number || a.Plan_Number || "";
      const status = a.status || a.Status || "";
      const dateRaw = a.compliance_Date || a.Compliance_Date;
      const date =
        typeof dateRaw === "string"
          ? dateRaw.slice(0, 10)
          : dateRaw
          ? new Date(dateRaw).toISOString().slice(0, 10)
          : "";
      const comments = a.comments || a.Comments || "";
      return [id, plan, status, date, comments];
    });

    const csv =
      headers.join(",") +
      "\n" +
      rows.map((r) => r.map((cell) => `"${String(cell).replace(/"/g, '""')}"`).join(",")).join("\n");

    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `aml_export_${new Date().toISOString().slice(0, 10)}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <Container maxWidth="lg" sx={{ py: 3 }}>
      {/* Page Header */}
      <Box
        sx={{
          mb: 2,
          display: "flex",
          alignItems: "center",
          gap: 2,
          justifyContent: "space-between",
        }}
      >
        <Box sx={{ display: "flex", alignItems: "center", gap: 1.25 }}>
          <SdfIcon icon="action-view-list" />
          <Typography variant="h5" fontWeight={700}>
            AML Records
          </Typography>
        </Box>

        <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
          <TextField
            size="small"
            label="Search by Plan Number"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
          <SdfButton
            action="standard"
            emphasis="secondary"
            onClick={handleExportCsv}
            style={{ display: "inline-flex", gap: 6 }}
            title="Export CSV"
          >
            <SdfIcon icon="action-download" />
            Export
          </SdfButton>
          <SdfButton
            action="standard"
            emphasis="primary"
            onClick={() => setOpen(true)}
            style={{ display: "inline-flex", gap: 8 }}
          >
            <SdfIcon icon="action-add" />
            Add AML
          </SdfButton>
          <SdfButton
            action="standard"
            emphasis="secondary"
            onClick={handleLogout}
            style={{ display: "inline-flex", gap: 6 }}
          >
            <SdfIcon icon="action-logout" />
            Logout
          </SdfButton>
        </Box>
      </Box>

      {/* Mini dashboard */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} sm={6} md={3}>
          <SdfCard>
            <SdfCardHeader title="Total" />
            <Box sx={{ p: 2, fontSize: 28, fontWeight: 700 }}>{total}</Box>
            <SdfCardFooter>
              <Box sx={{ p: 2, pt: 0, color: "#64748b" }}>All filtered records</Box>
            </SdfCardFooter>
          </SdfCard>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <SdfCard>
            <SdfCardHeader title="Compliant" />
            <Box sx={{ p: 2, fontSize: 28, fontWeight: 700 }}>{compliant}</Box>
            <SdfCardFooter>
              <Box sx={{ p: 2, pt: 0, color: "#22c55e" }}>Good standing</Box>
            </SdfCardFooter>
          </SdfCard>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <SdfCard>
            <SdfCardHeader title="Pending" />
            <Box sx={{ p: 2, fontSize: 28, fontWeight: 700 }}>{pending}</Box>
            <SdfCardFooter>
              <Box sx={{ p: 2, pt: 0, color: "#eab308" }}>Needs attention</Box>
            </SdfCardFooter>
          </SdfCard>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <SdfCard>
            <SdfCardHeader title="Other" />
            <Box sx={{ p: 2, fontSize: 28, fontWeight: 700 }}>{other}</Box>
            <SdfCardFooter>
              <Box sx={{ p: 2, pt: 0, color: "#94a3b8" }}>Everything else</Box>
            </SdfCardFooter>
          </SdfCard>
        </Grid>
      </Grid>

      {/* Status mix chart */}
      <Box
        sx={{
          p: 2,
          mb: 2,
          borderRadius: 2,
          bgcolor: "#fff",
          border: "1px solid #e5e7eb",
          height: 220,
        }}
      >
        <Typography variant="subtitle1" sx={{ mb: 1.5, display: "flex", alignItems: "center", gap: 1 }}>
          <SdfIcon icon="action-view-reports" />
          Status Distribution
        </Typography>
        <ResponsiveContainer width="100%" height={160}>
          <BarChart data={statusChart}>
            <XAxis dataKey="name" tick={{ fontSize: 12 }} />
            <YAxis allowDecimals={false} tick={{ fontSize: 12 }} />
            <Tooltip />
            <Bar dataKey="value" />
          </BarChart>
        </ResponsiveContainer>
      </Box>

      {/* Table */}
      <Box sx={{ borderRadius: 2, bgcolor: "#fff", border: "1px solid #e5e7eb" }}>
        <div style={{ maxHeight: 480, overflow: "auto" }}>
          <Table stickyHeader>
            <TableHead>
              <TableRow>
                <TableCell>AML_ID</TableCell>
                <TableCell>Plan Number</TableCell>
                <TableCell>Status</TableCell>
                <TableCell>Compliance Date</TableCell>
                <TableCell>Comments</TableCell>
                <TableCell align="right">Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filtered.length > 0 ? (
                filtered
                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  .map((a) => {
                    const id = a.aml_ID || a.AML_ID;
                    const plan = a.plan_Number || a.Plan_Number;
                    const status = a.status || a.Status;
                    const dateRaw = a.compliance_Date || a.Compliance_Date;
                    const comments = a.comments || a.Comments;

                    const date =
                      typeof dateRaw === "string"
                        ? dateRaw.slice(0, 10)
                        : dateRaw
                        ? new Date(dateRaw).toISOString().slice(0, 10)
                        : "";

                    return (
                      <TableRow key={id}>
                        <TableCell>{id}</TableCell>
                        <TableCell>{plan}</TableCell>
                        <TableCell>{status}</TableCell>
                        <TableCell>{date}</TableCell>
                        <TableCell>{comments}</TableCell>
                        <TableCell align="right" style={{ whiteSpace: "nowrap" }}>
                          <SdfButton
                            size="small"
                            action="standard"
                            emphasis="secondary"
                            onClick={() => handleEdit(a)}
                            style={{ marginRight: 6, display: "inline-flex", gap: 6, padding: "2px 8px" }}
                            title="Edit"
                          >
                            <SdfIcon icon="action-edit" />
                            Edit
                          </SdfButton>
                          <SdfButton
                            size="small"
                            action="standard"
                            emphasis="secondary"
                            onClick={() => handleDelete(id)}
                            style={{ display: "inline-flex", gap: 6, padding: "2px 8px" }}
                            title="Delete"
                          >
                            <SdfIcon icon="action-delete" />
                            Delete
                          </SdfButton>
                        </TableCell>
                      </TableRow>
                    );
                  })
              ) : (
                <TableRow>
                  <TableCell colSpan={6} align="center">
                    No records found
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>

        {/* Pagination */}
        <TablePagination
          rowsPerPageOptions={[5, 10, 25]}
          component="div"
          count={filtered.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={(e, newPage) => setPage(newPage)}
          onRowsPerPageChange={(e) => {
            setRowsPerPage(parseInt(e.target.value, 10));
            setPage(0);
          }}
        />
      </Box>

      {/* Modal Form */}
      <Dialog open={open} onClose={() => setOpen(false)} fullWidth maxWidth="sm">
        <DialogTitle>{editId ? "Edit AML" : "Add AML"}</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            label="Plan Number"
            margin="normal"
            value={form.planNumber}
            onChange={(e) => setForm({ ...form, planNumber: e.target.value })}
          />
          <TextField
            fullWidth
            label="Status"
            margin="normal"
            value={form.status}
            onChange={(e) => setForm({ ...form, status: e.target.value })}
          />
          <TextField
            fullWidth
            label="Compliance Date"
            type="date"
            margin="normal"
            InputLabelProps={{ shrink: true }}
            value={form.complianceDate}
            onChange={(e) => setForm({ ...form, complianceDate: e.target.value })}
          />
          <TextField
            fullWidth
            label="Comments"
            margin="normal"
            value={form.comments}
            onChange={(e) => setForm({ ...form, comments: e.target.value })}
          />
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 2 }}>
          <SdfButton
            action="standard"
            emphasis="secondary"
            onClick={() => setOpen(false)}
            style={{ display: "inline-flex", gap: 6 }}
          >
            <SdfIcon icon="action-close" />
            Cancel
          </SdfButton>
          <SdfButton
            action="standard"
            emphasis="primary"
            onClick={handleSave}
            style={{ display: "inline-flex", gap: 6 }}
          >
            <SdfIcon icon="action-save" />
            Save
          </SdfButton>
        </DialogActions>
      </Dialog>
    </Container>
  );
}
