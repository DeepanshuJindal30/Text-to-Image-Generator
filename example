Thanks for sharing your full SQL structure. Let's implement server-side pagination in SQL for your three main tables:


---

‚úÖ General SQL Pagination Template (SQL Server)

SELECT *
FROM [YourTable]
WHERE [OptionalFilter]
ORDER BY [SortColumn]
OFFSET (@PageNumber - 1) * @PageSize ROWS
FETCH NEXT @PageSize ROWS ONLY;

-- Also fetch total count for frontend
SELECT COUNT(*)
FROM [YourTable]
WHERE [OptionalFilter];


---

‚úÖ 1. AML Table: Deepanshu_AML

-- Pagination for AML Table
DECLARE @PageNumber INT = 1;
DECLARE @PageSize INT = 10;

SELECT *
FROM Deepanshu_AML WITH (NOLOCK)
ORDER BY AML_ID
OFFSET (@PageNumber - 1) * @PageSize ROWS
FETCH NEXT @PageSize ROWS ONLY;

-- Total count
SELECT COUNT(*) FROM Deepanshu_AML WITH (NOLOCK);


---

‚úÖ 2. Trustee Table: Deepanshu_Trustee

-- Pagination for Trustee Table
DECLARE @PageNumber INT = 1;
DECLARE @PageSize INT = 10;

SELECT *
FROM Deepanshu_Trustee WITH (NOLOCK)
ORDER BY Trustee_ID
OFFSET (@PageNumber - 1) * @PageSize ROWS
FETCH NEXT @PageSize ROWS ONLY;

-- Total count
SELECT COUNT(*) FROM Deepanshu_Trustee WITH (NOLOCK);


---

‚úÖ 3. Service Provider Table: Deepanshu_SP

-- Pagination for Service Provider Table
DECLARE @PageNumber INT = 1;
DECLARE @PageSize INT = 10;

SELECT *
FROM Deepanshu_SP WITH (NOLOCK)
ORDER BY SP_ID
OFFSET (@PageNumber - 1) * @PageSize ROWS
FETCH NEXT @PageSize ROWS ONLY;

-- Total count
SELECT COUNT(*) FROM Deepanshu_SP WITH (NOLOCK);


---

üõ†Ô∏è Tip for Integration in Backend (Dapper/.NET)

You should:

Pass @PageNumber and @PageSize as parameters from your API.

Wrap both queries (paged + count) in the same execution using QueryMultipleAsync.



---

Would you like me to give you the full Dapper backend + controller code for these three paginated SQL queries too?

