import React, { useEffect, useState } from "react";
import api from "../api";
import {
  Button,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Container,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TablePagination,
} from "@mui/material";

export default function AMLList() {
  const [amlList, setAmlList] = useState([]);
  const [form, setForm] = useState({
    planNumber: "",
    status: "",
    complianceDate: "",
    comments: "",
  });
  const [open, setOpen] = useState(false);
  const [editId, setEditId] = useState(null);
  const [search, setSearch] = useState("");
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const fetchAML = async () => {
    const res = await api.get("/AML");
    setAmlList(res.data);
  };

  useEffect(() => {
    fetchAML();
  }, []);

  const handleSave = async () => {
const payload = {
  Plan_Number: form.planNumber,
  Status: form.status,
  Compliance_Date: form.complianceDate,
  Comments: form.comments,
};

if (editId) {
  await api.put(`/AML/${editId}`, payload);
} else {
  await api.post("/AML", payload);
}
    fetchAML();
    setOpen(false);
    setForm({ planNumber: "", status: "", complianceDate: "", comments: "" });
    setEditId(null);
  };

  const handleEdit = (aml) => {
    setForm({
      planNumber: aml.plan_Number || aml.Plan_Number,
      status: aml.status || aml.Status,
      complianceDate: aml.compliance_Date || aml.Compliance_Date,
      comments: aml.comments || aml.Comments,
    });
    setEditId(aml.aml_ID || aml.AML_ID);
    setOpen(true);
  };

  const handleDelete = async (id) => {
    await api.delete(`/AML/${id}`);
    fetchAML();
  };

  const filtered = amlList.filter((a) =>
    (a.plan_Number || a.Plan_Number || "")
      .toLowerCase()
      .includes(search.toLowerCase())
  );

  return (
    <Container>
      <h2>AML Records</h2>
      <sdf-button variant="contained" onClick={() => setOpen(true)}>
        Add AML
      </sdf-button>
      <TextField
        label="Search by Plan Number"
        size="small"
        style={{ margin: "10px" }}
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />

      <div style={{ maxHeight: "400px", overflow: "auto" }}>
        <Table stickyHeader>
          <TableHead>
            <TableRow>
              <TableCell>AML_ID</TableCell>
              <TableCell>Plan Number</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>Compliance Date</TableCell>
              <TableCell>Comments</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filtered.length > 0 ? (
              filtered
                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                .map((a) => (
                  <TableRow key={a.aml_ID || a.AML_ID}>
                    <TableCell>{a.aml_ID || a.AML_ID}</TableCell>
                    <TableCell>{a.plan_Number || a.Plan_Number}</TableCell>
                    <TableCell>{a.status || a.Status}</TableCell>
                    <TableCell>
                      {a.compliance_Date || a.Compliance_Date}
                    </TableCell>
                    <TableCell>{a.comments || a.Comments}</TableCell>
                    <TableCell>
                      <Button onClick={() => handleEdit(a)}>Edit</Button>
                      <Button
                        color="error"
                        onClick={() => handleDelete(a.aml_ID || a.AML_ID)}
                      >
                        Delete
                      </Button>
                    </TableCell>
                  </TableRow>
                ))
            ) : (
              <TableRow>
                <TableCell colSpan={6} align="center">
                  No records found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      {/* Pagination */}
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={filtered.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={(e, newPage) => setPage(newPage)}
        onRowsPerPageChange={(e) => {
          setRowsPerPage(parseInt(e.target.value, 10));
          setPage(0);
        }}
      />

      {/* Modal Form */}
      <Dialog open={open} onClose={() => setOpen(false)}>
        <DialogTitle>{editId ? "Edit AML" : "Add AML"}</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            label="Plan Number"
            margin="normal"
            value={form.planNumber}
            onChange={(e) => setForm({ ...form, planNumber: e.target.value })}
          />
          <TextField
            fullWidth
            label="Status"
            margin="normal"
            value={form.status}
            onChange={(e) => setForm({ ...form, status: e.target.value })}
          />
          <TextField
            fullWidth
            label="Compliance Date"
            type="date"
            margin="normal"
            InputLabelProps={{ shrink: true }}
            value={form.complianceDate}
            onChange={(e) =>
              setForm({ ...form, complianceDate: e.target.value })
            }
          />
          <TextField
            fullWidth
            label="Comments"
            margin="normal"
            value={form.comments}
            onChange={(e) => setForm({ ...form, comments: e.target.value })}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpen(false)}>Cancel</Button>
          <Button variant="contained" onClick={handleSave}>
            Save
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
}

import React, { useState } from "react";
import { Button, TextField, Container, Typography } from "@mui/material";
import api from "../api";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { setAuth } from "../redux/slices/authSlice";
import { SdfButton } from "@waypoint/react-components";

export default function Login() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const handleLogin = async () => {
  try {
    const res = await api.post("/auth/login", { 
      usernameOrEmail: username,  // âœ… match backend property
      password 
    });

    localStorage.setItem("token", res.data.token);
    localStorage.setItem("roles", JSON.stringify(res.data.roles));

    api.defaults.headers.common["Authorization"] = `Bearer ${res.data.token}`;
    dispatch(setAuth({ token: res.data.token, roles: res.data.roles }));

    alert("Login Successful");

    if (res.data.roles.includes("Admin")) {
      navigate("/aml");
    } else if (res.data.roles.includes("Manager")) {
      navigate("/trustee");
    } else {
      navigate("/sp");
    }
  } catch (err) {
    alert("Login Failed: " + (err.response?.data || err.message));
  }
};

  return (
    <Container maxWidth="sm">
      <Typography variant="h4" gutterBottom>
        Login
      </Typography>
      <TextField
        label="Username or Email"
        fullWidth
        margin="normal"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />
      <TextField
        label="Password"
        type="password"
        fullWidth
        margin="normal"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <SdfButton variant="contained" fullWidth onClick={handleLogin}>
        Login
      </SdfButton>
    </Container>
  );
}import React from "react";
import { AppBar, Toolbar, Button, Typography } from "@mui/material";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { clearAuth } from "../redux/slices/authSlice";

export default function Navbar() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const token = localStorage.getItem("token");
  const roles = JSON.parse(localStorage.getItem("roles") || "[]");

  const isAdmin = roles.includes("Admin");
  const isManager = roles.includes("Manager");
  const isUser = roles.includes("User");

  const handleLogout = () => {
    localStorage.clear();
    dispatch(clearAuth());
    navigate("/");
  };

  return (
    <AppBar position="static">
      <Toolbar>
        <Typography variant="h6" sx={{ flexGrow: 1 }}>
          Dashboard
        </Typography>

        {/* Show login/register only when not logged in */}
        {!token && (
          <>
            <Button color="inherit" onClick={() => navigate("/")}>
              Login
            </Button>
            <Button color="inherit" onClick={() => navigate("/register")}>
              Register
            </Button>
          </>
        )}

        {/* Show dashboard tabs after login based on role */}
        {token && (
          <>
            {(isAdmin || isManager) && (
              <Button color="inherit" onClick={() => navigate("/trustee")}>
                Trustee
              </Button>
            )}

            {(isAdmin || isUser) && (
              <Button color="inherit" onClick={() => navigate("/sp")}>
                SP
              </Button>
            )}

            {isAdmin && (
              <Button color="inherit" onClick={() => navigate("/aml")}>
                AML
              </Button>
            )}

            <Button color="inherit" onClick={handleLogout}>
              Logout
            </Button>
          </>
        )}
      </Toolbar>
    </AppBar>
  );
}
import React, { useState } from "react";
import { Button, TextField, Container, Typography, Alert } from "@mui/material";
import api from "../api"; // axios instance
import { useNavigate } from "react-router-dom";

export default function Register() {
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [role, setRole] = useState("User"); // default role
  const [error, setError] = useState(""); // error message
  const navigate = useNavigate();

  const handleRegister = async () => {
    setError(""); // clear error

    // âœ… Email format validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      setError("Please enter a valid email address");
      return;
    }

    // âœ… Password validation (same as backend)
    const passwordRegex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d]).{8,}$/;
    if (!passwordRegex.test(password)) {
      setError(
        "Password must be at least 8 characters, include uppercase, lowercase, number, and special character."
      );
      return;
    }

    try {
      await api.post("/auth/register", { username, email, password, role });
      alert("User Registered Successfully");
      navigate("/"); // redirect to login
    } catch (err) {
      setError(
        "Registration Failed: " +
          (err.response?.data || err.message)
      );
    }
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 5 }}>
      <Typography variant="h4" gutterBottom align="center">
        Register
      </Typography>

      {/* Show error message if any */}
      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

      <TextField
        label="Username"
        fullWidth
        margin="normal"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />

      <TextField
        label="Email"
        fullWidth
        margin="normal"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />

      <TextField
        label="Password"
        type="password"
        fullWidth
        margin="normal"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />

      <TextField
        label="Role (Admin/User)"
        fullWidth
        margin="normal"
        value={role}
        onChange={(e) => setRole(e.target.value)}
      />

      <Button
        variant="contained"
        fullWidth
        sx={{ mt: 2, py: 1 }}
        onClick={handleRegister}
      >
        Register
      </Button>
    </Container>
  );
}import React, { useEffect, useState } from "react";
import api from "../api";
import {
  Button,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Container,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TablePagination,
} from "@mui/material";

export default function SPList() {
  const [spList, setSpList] = useState([]);
  const [form, setForm] = useState({
    name: "",
    serviceType: "",
    trusteeId: "",
  });
  const [open, setOpen] = useState(false);
  const [editId, setEditId] = useState(null);
  const [search, setSearch] = useState("");
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const fetchSP = async () => {
    const res = await api.get("/sp");
    setSpList(res.data);
  };

  useEffect(() => {
    fetchSP();
  }, []);

 const handleSave = async () => {
  const payload = {
    Name: form.name,
    Service_Type: form.serviceType,
    Trustee_ID: parseInt(form.trusteeId)
  };

  if (editId) {
    await api.put(`/sp/${editId}`, payload);
  } else {
    await api.post("/sp", payload);
  }

  fetchSP();
  setOpen(false);
  setForm({ name: "", serviceType: "", trusteeId: "" });
  setEditId(null);
};

  const handleEdit = (sp) => {
    setForm({
      name: sp.name || sp.Name,
      serviceType: sp.service_Type || sp.Service_Type,
      trusteeId: sp.trustee_ID || sp.Trustee_ID,
    });
    setEditId(sp.sp_ID || sp.SP_ID);
    setOpen(true);
  };

  const handleDelete = async (id) => {
    await api.delete(`/sp/${id}`);
    fetchSP();
  };

  const filtered = spList.filter((sp) =>
    (sp.name || sp.Name || "")
      .toLowerCase()
      .includes(search.toLowerCase())
  );

  return (
    <Container>
      <h2>Service Provider Records</h2>
      <Button variant="contained" onClick={() => setOpen(true)}>
        Add SP
      </Button>
      <TextField
        label="Search by Name"
        size="small"
        style={{ margin: "10px" }}
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />

      <div style={{ maxHeight: "400px", overflow: "auto" }}>
        <Table stickyHeader>
          <TableHead>
            <TableRow>
              <TableCell>SP_ID</TableCell>
              <TableCell>Name</TableCell>
              <TableCell>Service Type</TableCell>
              <TableCell>Trustee_ID</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filtered.length > 0 ? (
              filtered
                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                .map((sp) => (
                  <TableRow key={sp.sp_ID || sp.SP_ID}>
                    <TableCell>{sp.sp_ID || sp.SP_ID}</TableCell>
                    <TableCell>{sp.name || sp.Name}</TableCell>
                    <TableCell>
                      {sp.service_Type || sp.Service_Type}
                    </TableCell>
                    <TableCell>{sp.trustee_ID || sp.Trustee_ID}</TableCell>
                    <TableCell>
                      <Button onClick={() => handleEdit(sp)}>Edit</Button>
                      <Button
                        color="error"
                        onClick={() => handleDelete(sp.sp_ID || sp.SP_ID)}
                      >
                        Delete
                      </Button>
                    </TableCell>
                  </TableRow>
                ))
            ) : (
              <TableRow>
                <TableCell colSpan={5} align="center">
                  No records found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      {/* Pagination */}
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={filtered.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={(e, newPage) => setPage(newPage)}
        onRowsPerPageChange={(e) => {
          setRowsPerPage(parseInt(e.target.value, 10));
          setPage(0);
        }}
      />

      {/* Modal Form */}
      <Dialog open={open} onClose={() => setOpen(false)}>
        <DialogTitle>{editId ? "Edit Service Provider" : "Add Service Provider"}</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            label="Name"
            margin="normal"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
          />
          <TextField
            fullWidth
            label="Service Type"
            margin="normal"
            value={form.serviceType}
            onChange={(e) => setForm({ ...form, serviceType: e.target.value })}
          />
          <TextField
            fullWidth
            label="Trustee ID"
            margin="normal"
            value={form.trusteeId}
            onChange={(e) => setForm({ ...form, trusteeId: e.target.value })}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpen(false)}>Cancel</Button>
          <Button variant="contained" onClick={handleSave}>
            Save
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
}import React, { useEffect, useState } from "react";
import api from "../api";
import {
  Button,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Container,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TablePagination,
} from "@mui/material";

export default function TrusteeList() {
  const [trustees, setTrustees] = useState([]);
  const [form, setForm] = useState({
    name: "",
    email: "",
    phone: "",
    planNumber: "",
  });
  const [open, setOpen] = useState(false);
  const [editId, setEditId] = useState(null);
  const [search, setSearch] = useState("");
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const fetchTrustees = async () => {
    const res = await api.get("/Trustee");
    setTrustees(res.data);
  };

  useEffect(() => {
    fetchTrustees();
  }, []);

  const handleSave = async () => {
    if (editId) {
      await api.put(`/Trustee/${editId}`, {
  Name: form.name,
  Email: form.email,
  Phone: form.phone,
  Plan_Number: form.planNumber,
});

    } else {
      
await api.post("/Trustee", {
  Name: form.name,
  Email: form.email,
  Phone: form.phone,
  Plan_Number: form.planNumber,
});
    }
    fetchTrustees();
    setOpen(false);
    setForm({ name: "", email: "", phone: "", planNumber: "" });
    setEditId(null);
  };

  const handleEdit = (t) => {
    setForm({
      name: t.name || t.Name,
      email: t.email || t.Email,
      phone: t.phone || t.Phone,
      planNumber: t.plan_Number || t.Plan_Number,
    });
    setEditId(t.trustee_ID || t.Trustee_ID);
    setOpen(true);
  };

  const handleDelete = async (id) => {
    await api.delete(`/Trustee/${id}`);
    fetchTrustees();
  };

  const filtered = trustees.filter((t) =>
    (t.name || t.Name || "")
      .toLowerCase()
      .includes(search.toLowerCase())
  );

  return (
    <Container>
      <h2>Trustee Records</h2>
      <Button variant="contained" onClick={() => setOpen(true)}>
        Add Trustee
      </Button>
      <TextField
        label="Search by Name"
        size="small"
        style={{ margin: "10px" }}
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />

      <div style={{ maxHeight: "400px", overflow: "auto" }}>
        <Table stickyHeader>
          <TableHead>
            <TableRow>
              <TableCell>Trustee_ID</TableCell>
              <TableCell>Name</TableCell>
              <TableCell>Email</TableCell>
              <TableCell>Phone</TableCell>
              <TableCell>Plan Number</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filtered.length > 0 ? (
              filtered
                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                .map((t) => (
                  <TableRow key={t.trustee_ID || t.Trustee_ID}>
                    <TableCell>{t.trustee_ID || t.Trustee_ID}</TableCell>
                    <TableCell>{t.name || t.Name}</TableCell>
                    <TableCell>{t.email || t.Email}</TableCell>
                    <TableCell>{t.phone || t.Phone}</TableCell>
                    <TableCell>{t.plan_Number || t.Plan_Number}</TableCell>
                    <TableCell>
                      <Button onClick={() => handleEdit(t)}>Edit</Button>
                      <Button
                        color="error"
                        onClick={() =>
                          handleDelete(t.trustee_ID || t.Trustee_ID)
                        }
                      >
                        Delete
                      </Button>
                    </TableCell>
                  </TableRow>
                ))
            ) : (
              <TableRow>
                <TableCell colSpan={6} align="center">
                  No records found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      {/* Pagination */}
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={filtered.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={(e, newPage) => setPage(newPage)}
        onRowsPerPageChange={(e) => {
          setRowsPerPage(parseInt(e.target.value, 10));
          setPage(0);
        }}
      />

      {/* Modal Form */}
      <Dialog open={open} onClose={() => setOpen(false)}>
        <DialogTitle>{editId ? "Edit Trustee" : "Add Trustee"}</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            label="Name"
            margin="normal"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
          />
          <TextField
            fullWidth
            label="Email"
            margin="normal"
            value={form.email}
            onChange={(e) => setForm({ ...form, email: e.target.value })}
          />
          <TextField
            fullWidth
            label="Phone"
            margin="normal"
            value={form.phone}
            onChange={(e) => setForm({ ...form, phone: e.target.value })}
          />
          <TextField
            fullWidth
            label="Plan Number"
            margin="normal"
            value={form.planNumber}
            onChange={(e) =>
              setForm({ ...form, planNumber: e.target.value })
            }
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpen(false)}>Cancel</Button>
          <Button variant="contained" onClick={handleSave}>
            Save
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
}
import { Routes, Route } from "react-router-dom";
import Login from "./components/Login";
import AMLList from "./components/AMLList";
import TrusteeList from "./components/TrusteeList";
import SPList from "./components/SPList";
import Register from "./components/Register";
import Navbar from "./components/NavBar"; // âœ… Import

export default function App() {
  return (
    <div>
      <Navbar /> {/* âœ… Use the dynamic navbar */}

      <Routes>
        <Route path="/" element={<Login />} />
        <Route path="/aml" element={<AMLList />} />
        <Route path="/trustee" element={<TrusteeList />} />
        <Route path="/sp" element={<SPList />} />
        <Route path="/register" element={<Register />} />
      </Routes>
    </div>
  );
}
