Thanks for sharing your existing AMLController. To add pagination in your GET endpoint using Dapper in ASP.NET Core, here’s how the logic works and how to implement it:


---

✅ SQL Pagination Logic (Core Idea)

In SQL Server (which you're using), pagination is implemented using OFFSET and FETCH NEXT clauses.
The syntax is:

SELECT * FROM TableName
ORDER BY SomeColumn
OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY

Where:

@Offset = (PageNumber - 1) * PageSize

@PageSize = how many records per page



---

✅ Updated GET Method with Pagination

Here’s how to modify your GetAll() method to include pagination:

[HttpGet("paged")]
public async Task<IActionResult> GetPaged([FromQuery] int pageNumber = 1, [FromQuery] int pageSize = 10)
{
    using var conn = _context.CreateConnection();

    // Calculate OFFSET
    var offset = (pageNumber - 1) * pageSize;

    var sql = @"
        SELECT * FROM Deepanshu_AML WITH (NOLOCK)
        ORDER BY AML_ID
        OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY;

        SELECT COUNT(1) FROM Deepanshu_AML;
    ";

    using var multi = await conn.QueryMultipleAsync(sql, new { Offset = offset, PageSize = pageSize });

    var items = await multi.ReadAsync<AMLModel>();
    var totalCount = await multi.ReadFirstAsync<int>();

    var response = new
    {
        Data = items,
        TotalRecords = totalCount,
        PageNumber = pageNumber,
        PageSize = pageSize,
        TotalPages = (int)Math.Ceiling((double)totalCount / pageSize)
    };

    return Ok(response);
}


---

✅ Frontend/Consumer Can Call This Like

GET /api/aml/paged?pageNumber=2&pageSize=5


---

✅ What You Need to Ensure

1. ORDER BY is mandatory with OFFSET/FETCH.


2. You return TotalCount so that frontend knows how many total pages exist.


3. Don't forget to import:

using Dapper;
using System.Linq;




---

✅ Optional: Create a PaginationResponse<T> Class

If you want to make the API more structured, create a reusable response type:

public class PagedResponse<T>
{
    public IEnumerable<T> Data { get; set; }
    public int TotalRecords { get; set; }
    public int PageNumber { get; set; }
    public int PageSize { get; set; }
    public int TotalPages => (int)Math.Ceiling((double)TotalRecords / PageSize);
}

Then change the controller return to:

var response = new PagedResponse<AMLModel>
{
    Data = items,
    TotalRecords = totalCount,
    PageNumber = pageNumber,
    PageSize = pageSize
};


---

Would you like me to modify your entire controller code with pagination added cleanly and fixed syntax errors as well?

