// src/App.jsx
import { Routes, Route, Navigate, useLocation } from "react-router-dom";
import { useMemo } from "react";
import Login from "./components/Login";
import AMLList from "./components/AMLList";
import TrusteeList from "./components/TrusteeList";
import SPList from "./components/SPList";
import Register from "./components/Register";
import Navbar from "./components/NavBar";

// --- Guards ---
function RequireAuth({ children }) {
  const token = localStorage.getItem("token");
  const location = useLocation();

  if (!token) {
    // Not logged in -> send to login, preserve where they tried to go
    return <Navigate to="/" replace state={{ from: location }} />;
  }
  return children;
}

function RoleRoute({ allowed, children }) {
  const roles = useMemo(
    () => JSON.parse(localStorage.getItem("roles") || "[]"),
    []
  );

  const isAllowed = roles.some((r) => allowed.includes(r));
  if (!isAllowed) {
    // Logged in but not allowed -> send somewhere safe
    return <Navigate to="/" replace />;
  }
  return children;
}

export default function App() {
  return (
    <div>
      <Navbar />

      <Routes>
        {/* Public routes */}
        <Route path="/" element={<Login />} />
        <Route path="/register" element={<Register />} />

        {/* Protected + role-restricted routes */}
        <Route
          path="/aml"
          element={
            <RequireAuth>
              <RoleRoute allowed={["Admin"]}>
                <AMLList />
              </RoleRoute>
            </RequireAuth>
          }
        />
        <Route
          path="/trustee"
          element={
            <RequireAuth>
              <RoleRoute allowed={["Admin", "Manager"]}>
                <TrusteeList />
              </RoleRoute>
            </RequireAuth>
          }
        />
        <Route
          path="/sp"
          element={
            <RequireAuth>
              <RoleRoute allowed={["Admin", "User"]}>
                <SPList />
              </RoleRoute>
            </RequireAuth>
          }
        />

        {/* Fallback */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </div>
  );
}




// src/components/NavBar.jsx
import React from "react";
import { AppBar, Toolbar, Button, Typography } from "@mui/material";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { clearAuth } from "../redux/slices/authSlice";

export default function Navbar() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const token = localStorage.getItem("token");
  const roles = JSON.parse(localStorage.getItem("roles") || "[]");

  const isAdmin = roles.includes("Admin");
  const isManager = roles.includes("Manager");
  const isUser = roles.includes("User");

  const handleLogout = () => {
    localStorage.clear();
    dispatch(clearAuth());
    navigate("/");
  };

  return (
    <AppBar position="static">
      <Toolbar>
        <Typography variant="h6" sx={{ flexGrow: 1 }}>
          Dashboard
        </Typography>

        {!token ? (
          <>
            <Button color="inherit" onClick={() => navigate("/")}>
              Login
            </Button>
            <Button color="inherit" onClick={() => navigate("/register")}>
              Register
            </Button>
          </>
        ) : (
          <>
            {(isAdmin || isManager) && (
              <Button color="inherit" onClick={() => navigate("/trustee")}>
                Trustee
              </Button>
            )}
            {(isAdmin || isUser) && (
              <Button color="inherit" onClick={() => navigate("/sp")}>
                SP
              </Button>
            )}
            {isAdmin && (
              <Button color="inherit" onClick={() => navigate("/aml")}>
                AML
              </Button>
            )}
            <Button color="inherit" onClick={handleLogout}>
              Logout
            </Button>
          </>
        )}
      </Toolbar>
    </AppBar>
  );
}




// src/redux/slices/authSlice.js
import { createSlice } from "@reduxjs/toolkit";

const authSlice = createSlice({
  name: "auth",
  initialState: {
    isLoggedIn: false,
    token: null,
    roles: [], // <-- array
  },
  reducers: {
    setAuth(state, action) {
      const { token, roles } = action.payload; // <-- expect array
      state.isLoggedIn = true;
      state.token = token;
      state.roles = roles || [];
    },
    clearAuth(state) {
      state.isLoggedIn = false;
      state.token = null;
      state.roles = [];
    },
  },
});

export const { setAuth, clearAuth } = authSlice.actions;
export default authSlice.reducer;