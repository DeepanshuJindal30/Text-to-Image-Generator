<div style={styles.toggleSwitchSecDiv} id="contactTypeDivId">
  {contactTypes.map((eachContactType, i) => {
    const contactTypeId = eachContactType.contactTypeId;
    const contactTypeSwitch = this.state.toggleSwitch;
    const contactTypeSwitchRule = this.state.toggleSwitchRules || toggleSwitchRules; // pick where you store it

    // compute disabled state
    const toggleDisabled = !this.props.AddExisting
      ? !!contactTypeSwitchRule[contactTypeId]
      : false;

    // skip these roles entirely
    if (
      contactTypeId === Constants.ROLESREGION.AGENTBROKER ||
      contactTypeId === Constants.ROLESREGION.AGENTBROKER2 ||
      contactTypeId === Constants.ROLESREGION.AGENTBROKER3 ||
      contactTypeId === Constants.ROLESREGION.RIA ||
      contactTypeId === Constants.ROLESREGION.RIA_SECONDARY ||
      contactTypeId === Constants.ROLESREGION.RIA2
    ) {
      return null; // valid return for React (renders nothing)
    }

    // the ONLY return for visible rows
    return (
      <div style={styles.toggleSwitchDiv} key={i}>
        <ToggleSwitch
          label={eachContactType.contactTypeName}
          value={contactTypeSwitch[contactTypeId]}
          valuePath={contactTypeId}
          isDisabled={toggleDisabled}
          onValueChange={(e) => this.handleToggleValue(e, contactTypeId)}
        />
      </div>
    );
  })}
</div>