Got it! ‚úÖ We'll design the frontend pages (React) according to your table structure (AML, Trustee, SP) with:

1. CRUD operations (Add/Edit/Delete)


2. Search Bar (by Plan Number, Name, etc.)


3. Graphs/Analytics


4. Dashboard UI with professional design




---

1Ô∏è‚É£ Project Structure (Updated)

src/
‚îÇ
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ Layout.jsx
‚îÇ   ‚îú‚îÄ‚îÄ CustomTable.jsx
‚îÇ   ‚îú‚îÄ‚îÄ ModalForm.jsx
‚îÇ   ‚îú‚îÄ‚îÄ GraphCard.jsx   // NEW: Reusable graph component
‚îÇ
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ DashboardPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ AMLPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ TrusteePage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ SPPage.jsx
‚îÇ
‚îú‚îÄ‚îÄ redux/
‚îÇ   ‚îú‚îÄ‚îÄ api.js
‚îÇ
‚îú‚îÄ‚îÄ App.js
‚îú‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ App.css


---

2Ô∏è‚É£ Dashboard Page (Analytics + Graphs)

pages/DashboardPage.jsx

import React, { useEffect, useState } from "react";
import Layout from "../components/Layout";
import GraphCard from "../components/GraphCard";
import api from "../redux/api";

export default function DashboardPage() {
  const [amlCount, setAmlCount] = useState(0);
  const [trusteeCount, setTrusteeCount] = useState(0);
  const [spData, setSpData] = useState([]);

  useEffect(() => {
    async function fetchData() {
      const aml = await api.get("/AML");
      const trustee = await api.get("/Trustee");
      const sp = await api.get("/SP");

      setAmlCount(aml.data.length);
      setTrusteeCount(trustee.data.length);

      const group = sp.data.reduce((acc, sp) => {
        acc[sp.trustee_ID] = (acc[sp.trustee_ID] || 0) + 1;
        return acc;
      }, {});
      setSpData(Object.keys(group).map(k => ({ trustee: k, count: group[k] })));
    }
    fetchData();
  }, []);

  return (
    <Layout>
      <h2>PES Dashboard</h2>
      <div className="dashboard-grid">
        <GraphCard title="AML Records" value={amlCount} />
        <GraphCard title="Trustees" value={trusteeCount} />
        <GraphCard title="Service Providers per Trustee" chartData={spData} />
      </div>
    </Layout>
  );
}


---

3Ô∏è‚É£ AML Page (CRUD + Search)

pages/AMLPage.jsx

import React, { useEffect, useState } from "react";
import Layout from "../components/Layout";
import CustomTable from "../components/CustomTable";
import ModalForm from "../components/ModalForm";
import api from "../redux/api";

export default function AMLPage() {
  const [rows, setRows] = useState([]);
  const [search, setSearch] = useState("");

  useEffect(() => { fetchData(); }, []);

  const fetchData = async () => {
    const res = await api.get("/AML");
    setRows(res.data);
  };

  const handleDelete = async (id) => {
    await api.delete(`/AML/${id}`);
    fetchData();
  };

  const filteredRows = rows.filter((r) =>
    r.plan_Number.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <Layout>
      <h2>AML Records</h2>
      <input
        type="text"
        placeholder="Search by Plan Number"
        className="search-bar"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      <ModalForm table="AML" onSuccess={fetchData} />
      <CustomTable
        columns={[
          { field: "plan_Number", headerName: "Plan Number" },
          { field: "status", headerName: "Status" },
          { field: "compliance_Date", headerName: "Compliance Date" },
        ]}
        rows={filteredRows}
        onDelete={handleDelete}
      />
    </Layout>
  );
}


---

4Ô∏è‚É£ Trustee Page (CRUD + Search)

pages/TrusteePage.jsx

import React, { useEffect, useState } from "react";
import Layout from "../components/Layout";
import CustomTable from "../components/CustomTable";
import ModalForm from "../components/ModalForm";
import api from "../redux/api";

export default function TrusteePage() {
  const [rows, setRows] = useState([]);
  const [search, setSearch] = useState("");

  useEffect(() => { fetchData(); }, []);

  const fetchData = async () => {
    const res = await api.get("/Trustee");
    setRows(res.data);
  };

  const handleDelete = async (id) => {
    await api.delete(`/Trustee/${id}`);
    fetchData();
  };

  const filteredRows = rows.filter((r) =>
    r.name.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <Layout>
      <h2>Trustees</h2>
      <input
        type="text"
        placeholder="Search by Trustee Name"
        className="search-bar"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      <ModalForm table="Trustee" onSuccess={fetchData} />
      <CustomTable
        columns={[
          { field: "name", headerName: "Name" },
          { field: "email", headerName: "Email" },
          { field: "plan_Number", headerName: "Plan Number" },
        ]}
        rows={filteredRows}
        onDelete={handleDelete}
      />
    </Layout>
  );
}


---

5Ô∏è‚É£ Service Provider Page (CRUD + Search)

pages/SPPage.jsx

import React, { useEffect, useState } from "react";
import Layout from "../components/Layout";
import CustomTable from "../components/CustomTable";
import ModalForm from "../components/ModalForm";
import api from "../redux/api";

export default function SPPage() {
  const [rows, setRows] = useState([]);
  const [search, setSearch] = useState("");

  useEffect(() => { fetchData(); }, []);

  const fetchData = async () => {
    const res = await api.get("/SP");
    setRows(res.data);
  };

  const handleDelete = async (id) => {
    await api.delete(`/SP/${id}`);
    fetchData();
  };

  const filteredRows = rows.filter((r) =>
    r.name.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <Layout>
      <h2>Service Providers</h2>
      <input
        type="text"
        placeholder="Search by SP Name"
        className="search-bar"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      <ModalForm table="SP" onSuccess={fetchData} />
      <CustomTable
        columns={[
          { field: "name", headerName: "SP Name" },
          { field: "service_Type", headerName: "Service Type" },
          { field: "trustee_ID", headerName: "Trustee ID" },
        ]}
        rows={filteredRows}
        onDelete={handleDelete}
      />
    </Layout>
  );
}


---

6Ô∏è‚É£ UI Components

CustomTable.jsx ‚Üí Table with Delete/Edit buttons

ModalForm.jsx ‚Üí Popup for Add/Edit forms

GraphCard.jsx ‚Üí Displays dashboard stats or charts



---

7Ô∏è‚É£ Next Steps

üî• Do you want me to write the full code for CustomTable.jsx, ModalForm.jsx (popup CRUD) and the GraphCard.jsx with charts (using Chart.js) along with the final App.js navigation?

‚û°Ô∏è Also, should I add Tabs instead of pages (single-page experience) or keep Dashboard + Pages (AML, Trustee, SP) as separate routes?



Great question! Let's complete Layout.jsx and App.js so everything works together with the pages we created.


---

1Ô∏è‚É£ Layout.jsx

This will be the common layout for the Dashboard, AML, Trustee, and SP pages.
It includes a sidebar/navigation menu and keeps the UI consistent.

components/Layout.jsx

import React from "react";
import { Link, useLocation } from "react-router-dom";
import "./Layout.css";

export default function Layout({ children }) {
  const location = useLocation();

  return (
    <div className="layout-container">
      {/* Sidebar */}
      <aside className="sidebar">
        <h2 className="logo">PES Portal</h2>
        <nav>
          <ul>
            <li className={location.pathname === "/dashboard" ? "active" : ""}>
              <Link to="/dashboard">Dashboard</Link>
            </li>
            <li className={location.pathname === "/aml" ? "active" : ""}>
              <Link to="/aml">AML Trustee</Link>
            </li>
            <li className={location.pathname === "/trustee" ? "active" : ""}>
              <Link to="/trustee">Trustees</Link>
            </li>
            <li className={location.pathname === "/sp" ? "active" : ""}>
              <Link to="/sp">Service Providers</Link>
            </li>
          </ul>
        </nav>
      </aside>

      {/* Main Content */}
      <main className="main-content">{children}</main>
    </div>
  );
}

components/Layout.css (basic UI)

.layout-container {
  display: flex;
  height: 100vh;
  background: #f9f9f9;
}

.sidebar {
  width: 240px;
  background: #1f2937;
  color: white;
  display: flex;
  flex-direction: column;
  padding: 20px;
}

.sidebar .logo {
  margin-bottom: 30px;
}

.sidebar nav ul {
  list-style: none;
  padding: 0;
}

.sidebar nav ul li {
  margin: 15px 0;
}

.sidebar nav ul li a {
  color: white;
  text-decoration: none;
}

.sidebar nav ul li.active a {
  font-weight: bold;
  color: #3b82f6;
}

.main-content {
  flex: 1;
  padding: 20px;
  overflow-y: auto;
}


---

2Ô∏è‚É£ App.js

This file manages routing for all pages.

App.js

import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";

import Login from "./components/Login";
import Register from "./components/Register";

import DashboardPage from "./pages/DashboardPage";
import AMLPage from "./pages/AMLPage";
import TrusteePage from "./pages/TrusteePage";
import SPPage from "./pages/SPPage";

function App() {
  return (
    <Router>
      <Routes>
        {/* Auth */}
        <Route path="/" element={<Login />} />
        <Route path="/register" element={<Register />} />

        {/* Dashboard & Pages */}
        <Route path="/dashboard" element={<DashboardPage />} />
        <Route path="/aml" element={<AMLPage />} />
        <Route path="/trustee" element={<TrusteePage />} />
        <Route path="/sp" element={<SPPage />} />
      </Routes>
    </Router>
  );
}

export default App;


---

3Ô∏è‚É£ Flow Overview

Login/Register ‚Üí Redirect to Dashboard

Dashboard shows graphs (AML, Trustee, SP data)

AML/Trustee/SP Pages:

Use Layout.jsx (sidebar, main area)

Each page has CRUD, search, and table




---

4Ô∏è‚É£ Next Steps

üëâ Do you want me to:

1. Add ModalForm.jsx (Add/Edit Popup) and CustomTable.jsx (full CRUD with delete/edit buttons)?


2. Add GraphCard.jsx (Dashboard graphs using Chart.js or Recharts)?


3. Show how to redirect after login to Dashboard automatically?



‚ö° Do you want the AML, Trustee, and SP Pages in TABS inside a single dashboard (like switching tabs), or should we keep the current sidebar structure (pages)?

Perfect! Let's complete everything step-by-step for a professional dashboard with CRUD, graphs, search, and redirect after login.


---

1Ô∏è‚É£ ModalForm.jsx (Popup for Add/Edit)

This component will be reused for AML, Trustee, and SP pages.

components/ModalForm.jsx

import React from "react";
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField } from "@mui/material";

export default function ModalForm({ open, onClose, onSubmit, fields, formData, setFormData, title }) {
  return (
    <Dialog open={open} onClose={onClose} fullWidth>
      <DialogTitle>{title}</DialogTitle>
      <DialogContent>
        {fields.map((field) => (
          <TextField
            key={field.name}
            label={field.label}
            fullWidth
            margin="normal"
            value={formData[field.name] || ""}
            onChange={(e) => setFormData({ ...formData, [field.name]: e.target.value })}
          />
        ))}
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} variant="outlined">Cancel</Button>
        <Button onClick={onSubmit} variant="contained" color="primary">Save</Button>
      </DialogActions>
    </Dialog>
  );
}


---

2Ô∏è‚É£ CustomTable.jsx (Table with Search, CRUD buttons)

components/CustomTable.jsx

import React from "react";
import {
  Table, TableHead, TableRow, TableCell, TableBody, IconButton, TextField
} from "@mui/material";
import { Edit, Delete } from "@mui/icons-material";

export default function CustomTable({ columns, rows, onEdit, onDelete, searchTerm, setSearchTerm }) {
  return (
    <div>
      <TextField
        label="Search..."
        fullWidth
        margin="normal"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />
      <Table>
        <TableHead>
          <TableRow>
            {columns.map((col) => (
              <TableCell key={col.field}>{col.headerName}</TableCell>
            ))}
            <TableCell>Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {rows
            .filter((row) =>
              Object.values(row).some((val) =>
                val?.toString().toLowerCase().includes(searchTerm.toLowerCase())
              )
            )
            .map((row) => (
              <TableRow key={row.id}>
                {columns.map((col) => (
                  <TableCell key={col.field}>{row[col.field]}</TableCell>
                ))}
                <TableCell>
                  <IconButton color="primary" onClick={() => onEdit(row)}>
                    <Edit />
                  </IconButton>
                  <IconButton color="error" onClick={() => onDelete(row.id)}>
                    <Delete />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
        </TableBody>
      </Table>
    </div>
  );
}


---

3Ô∏è‚É£ DashboardPage.jsx (Graphs using Chart.js)

pages/DashboardPage.jsx

import React, { useEffect, useState } from "react";
import Layout from "../components/Layout";
import { Card, CardContent, Typography } from "@mui/material";
import { Bar } from "react-chartjs-2";
import api from "../api";

export default function DashboardPage() {
  const [stats, setStats] = useState({ aml: 0, trustee: 0, sp: 0 });

  useEffect(() => {
    const fetchData = async () => {
      const aml = await api.get("/AML");
      const trustee = await api.get("/Trustee");
      const sp = await api.get("/SP");

      setStats({ aml: aml.data.length, trustee: trustee.data.length, sp: sp.data.length });
    };
    fetchData();
  }, []);

  const chartData = {
    labels: ["AML", "Trustee", "Service Providers"],
    datasets: [
      {
        label: "Records",
        data: [stats.aml, stats.trustee, stats.sp],
        backgroundColor: ["#3b82f6", "#10b981", "#f59e0b"],
      },
    ],
  };

  return (
    <Layout>
      <Typography variant="h4" gutterBottom>
        PES Dashboard
      </Typography>
      <Card>
        <CardContent>
          <Bar data={chartData} />
        </CardContent>
      </Card>
    </Layout>
  );
}


---

4Ô∏è‚É£ Redirect after Login

Modify Login.jsx to redirect to Dashboard on success:

import { useNavigate } from "react-router-dom";

const navigate = useNavigate();

const handleLogin = async () => {
  try {
    const res = await api.post("/auth/login", { username, password });
    localStorage.setItem("token", res.data.token);
    navigate("/dashboard"); // redirect after login
  } catch (err) {
    alert("Login Failed");
  }
};


---

5Ô∏è‚É£ Pages for AML, Trustee, SP (With CRUD)

Each page uses CustomTable + ModalForm. Example for AMLPage.jsx:

import React, { useState, useEffect } from "react";
import Layout from "../components/Layout";
import CustomTable from "../components/CustomTable";
import ModalForm from "../components/ModalForm";
import { Button } from "@mui/material";
import api from "../api";

export default function AMLPage() {
  const [rows, setRows] = useState([]);
  const [open, setOpen] = useState(false);
  const [formData, setFormData] = useState({});
  const [searchTerm, setSearchTerm] = useState("");

  const fetchAML = async () => {
    const res = await api.get("/AML");
    setRows(res.data);
  };

  useEffect(() => {
    fetchAML();
  }, []);

  const handleSubmit = async () => {
    if (formData.id) {
      await api.put(`/AML/${formData.id}`, formData);
    } else {
      await api.post("/AML", formData);
    }
    setOpen(false);
    fetchAML();
  };

  const handleDelete = async (id) => {
    await api.delete(`/AML/${id}`);
    fetchAML();
  };

  return (
    <Layout>
      <h2>AML Trustee</h2>
      <Button variant="contained" onClick={() => { setFormData({}); setOpen(true); }}>
        Add AML
      </Button>
      <CustomTable
        columns={[
          { field: "plan_Number", headerName: "Plan Number" },
          { field: "status", headerName: "Status" },
          { field: "compliance_Date", headerName: "Compliance Date" },
        ]}
        rows={rows}
        onEdit={(row) => { setFormData(row); setOpen(true); }}
        onDelete={handleDelete}
        searchTerm={searchTerm}
        setSearchTerm={setSearchTerm}
      />
      <ModalForm
        open={open}
        onClose={() => setOpen(false)}
        onSubmit={handleSubmit}
        formData={formData}
        setFormData={setFormData}
        title="AML"
        fields={[
          { name: "plan_Number", label: "Plan Number" },
          { name: "status", label: "Status" },
          { name: "compliance_Date", label: "Compliance Date" },
          { name: "comments", label: "Comments" },
        ]}
      />
    </Layout>
  );
}

üëâ TrusteePage.jsx and SPPage.jsx will be similar, just adjust API endpoints and fields.


---

Next:

‚û° Do you want me to write full TrusteePage.jsx and SPPage.jsx like AMLPage?
‚û° Do you want me to add CSS for Dashboard + Pages (buttons, search bar, scroll)?
‚û° Should I add tabs inside Dashboard or keep side menu pages as is?



Sure! Below are full codes for TrusteePage.jsx and SPPage.jsx, with CRUD, search, and showing all table columns dynamically.


---

1Ô∏è‚É£ TrusteePage.jsx

pages/TrusteePage.jsx

import React, { useState, useEffect } from "react";
import Layout from "../components/Layout";
import CustomTable from "../components/CustomTable";
import ModalForm from "../components/ModalForm";
import { Button } from "@mui/material";
import api from "../api";

export default function TrusteePage() {
  const [rows, setRows] = useState([]);
  const [open, setOpen] = useState(false);
  const [formData, setFormData] = useState({});
  const [searchTerm, setSearchTerm] = useState("");

  const fetchTrustees = async () => {
    const res = await api.get("/Trustee");
    setRows(res.data);
  };

  useEffect(() => {
    fetchTrustees();
  }, []);

  const handleSubmit = async () => {
    if (formData.trustee_ID) {
      await api.put(`/Trustee/${formData.trustee_ID}`, formData);
    } else {
      await api.post("/Trustee", formData);
    }
    setOpen(false);
    fetchTrustees();
  };

  const handleDelete = async (id) => {
    await api.delete(`/Trustee/${id}`);
    fetchTrustees();
  };

  return (
    <Layout>
      <h2>Trustees</h2>
      <Button
        variant="contained"
        style={{ marginBottom: "10px" }}
        onClick={() => {
          setFormData({});
          setOpen(true);
        }}
      >
        Add Trustee
      </Button>
      <CustomTable
        columns={[
          { field: "trustee_ID", headerName: "Trustee ID" },
          { field: "name", headerName: "Name" },
          { field: "email", headerName: "Email" },
          { field: "phone", headerName: "Phone" },
          { field: "plan_Number", headerName: "Plan Number" },
        ]}
        rows={rows}
        onEdit={(row) => {
          setFormData(row);
          setOpen(true);
        }}
        onDelete={handleDelete}
        searchTerm={searchTerm}
        setSearchTerm={setSearchTerm}
      />
      <ModalForm
        open={open}
        onClose={() => setOpen(false)}
        onSubmit={handleSubmit}
        formData={formData}
        setFormData={setFormData}
        title="Trustee"
        fields={[
          { name: "name", label: "Name" },
          { name: "email", label: "Email" },
          { name: "phone", label: "Phone" },
          { name: "plan_Number", label: "Plan Number" },
        ]}
      />
    </Layout>
  );
}


---

2Ô∏è‚É£ SPPage.jsx

pages/SPPage.jsx

import React, { useState, useEffect } from "react";
import Layout from "../components/Layout";
import CustomTable from "../components/CustomTable";
import ModalForm from "../components/ModalForm";
import { Button } from "@mui/material";
import api from "../api";

export default function SPPage() {
  const [rows, setRows] = useState([]);
  const [open, setOpen] = useState(false);
  const [formData, setFormData] = useState({});
  const [searchTerm, setSearchTerm] = useState("");

  const fetchSP = async () => {
    const res = await api.get("/SP");
    setRows(res.data);
  };

  useEffect(() => {
    fetchSP();
  }, []);

  const handleSubmit = async () => {
    if (formData.sp_ID) {
      await api.put(`/SP/${formData.sp_ID}`, formData);
    } else {
      await api.post("/SP", formData);
    }
    setOpen(false);
    fetchSP();
  };

  const handleDelete = async (id) => {
    await api.delete(`/SP/${id}`);
    fetchSP();
  };

  return (
    <Layout>
      <h2>Service Providers</h2>
      <Button
        variant="contained"
        style={{ marginBottom: "10px" }}
        onClick={() => {
          setFormData({});
          setOpen(true);
        }}
      >
        Add Service Provider
      </Button>
      <CustomTable
        columns={[
          { field: "sp_ID", headerName: "SP ID" },
          { field: "name", headerName: "Name" },
          { field: "service_Type", headerName: "Service Type" },
          { field: "trustee_ID", headerName: "Trustee ID" },
        ]}
        rows={rows}
        onEdit={(row) => {
          setFormData(row);
          setOpen(true);
        }}
        onDelete={handleDelete}
        searchTerm={searchTerm}
        setSearchTerm={setSearchTerm}
      />
      <ModalForm
        open={open}
        onClose={() => setOpen(false)}
        onSubmit={handleSubmit}
        formData={formData}
        setFormData={setFormData}
        title="Service Provider"
        fields={[
          { name: "name", label: "Name" },
          { name: "service_Type", label: "Service Type" },
          { name: "trustee_ID", label: "Trustee ID" },
        ]}
      />
    </Layout>
  );
}


---

üîπ Features These Pages Have

‚úî CRUD (Add, Edit, Delete) using popup
‚úî Search bar filters data by any field
‚úî Displays all fields as per table schema
‚úî Data refreshes in real-time after operations
‚úî Consistent UI using Material-UI


---

Next Step:

Do you want me to now give you:

1. Updated App.js (With all routing including Dashboard, AML, Trustee, SP)?


2. Layout.jsx (Side menu + navbar for navigation)?


3. DashboardPage.jsx with graph and tabs integrated?



üëâ After that, I will give complete folder structure with CSS styling for a professional look. Do you want that?

