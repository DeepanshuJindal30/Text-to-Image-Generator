// src/components/SPList.jsx
import React, { useEffect, useMemo, useState } from "react";
import api from "../api";
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Container,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TablePagination,
  Box,
  Typography,
  Grid,
} from "@mui/material";
import { useNavigate } from "react-router-dom";
import {
  SdfButton,
  SdfIcon,
  SdfCard,
  SdfCardHeader,
  SdfCardFooter,
} from "@waypoint/react-components";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, Cell } from "recharts";

export default function SPList() {
  const [spList, setSpList] = useState([]);
  const [form, setForm] = useState({ name: "", serviceType: "", trusteeId: "" });
  const [open, setOpen] = useState(false);
  const [editId, setEditId] = useState(null);
  const [search, setSearch] = useState("");
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const navigate = useNavigate();

  const fetchSP = async () => {
    const res = await api.get("/sp");
    setSpList(res.data || []);
  };

  useEffect(() => {
    fetchSP();
  }, []);

  const handleLogout = () => {
    localStorage.clear();
    delete api.defaults.headers.common["Authorization"];
    navigate("/");
  };

  const handleSave = async () => {
    const payload = {
      Name: form.name,
      Service_Type: form.serviceType,
      Trustee_ID: parseInt(form.trusteeId, 10),
    };

    if (editId) {
      await api.put(`/sp/${editId}`, payload);
    } else {
      await api.post("/sp", payload);
    }

    fetchSP();
    setOpen(false);
    setForm({ name: "", serviceType: "", trusteeId: "" });
    setEditId(null);
  };

  const handleEdit = (sp) => {
    setForm({
      name: sp.name || sp.Name || "",
      serviceType: sp.service_Type || sp.Service_Type || "",
      trusteeId: (sp.trustee_ID || sp.Trustee_ID || "").toString(),
    });
    setEditId(sp.sp_ID || sp.SP_ID);
    setOpen(true);
  };

  const handleDelete = async (id) => {
    await api.delete(`/sp/${id}`);
    fetchSP();
  };

  // Filter (client-side) by Name
  const filtered = useMemo(
    () =>
      spList.filter((sp) =>
        (sp.name || sp.Name || "").toString().toLowerCase().includes(search.toLowerCase())
      ),
    [spList, search]
  );

  // ------- Dashboard metrics + chart data -------
  const { total, uniqueServiceTypes, uniqueTrustees, linkedPct, topServiceType, chartData } =
    useMemo(() => {
      const total = filtered.length;

      const serviceSet = new Set();
      const trusteeSet = new Set();
      let linked = 0;

      const svcCounts = filtered.reduce((acc, sp) => {
        const svc = (sp.service_Type || sp.Service_Type || "Unknown").toString().trim() || "Unknown";
        serviceSet.add(svc);
        const tr = sp.trustee_ID || sp.Trustee_ID;
        if (tr) {
          trusteeSet.add(tr);
          linked += 1;
        }
        acc[svc] = (acc[svc] || 0) + 1;
        return acc;
      }, {});

      const uniqueServiceTypes = serviceSet.size;
      const uniqueTrustees = trusteeSet.size;
      const linkedPct = total ? Math.round((linked / total) * 100) : 0;

      const entries = Object.entries(svcCounts)
        .map(([name, value]) => ({ name, value }))
        .sort((a, b) => b.value - a.value);

      const topServiceType = entries[0]?.name || "-";
      const chartData = entries.slice(0, 10);

      return { total, uniqueServiceTypes, uniqueTrustees, linkedPct, topServiceType, chartData };
    }, [filtered]);

  // Export current filtered view to CSV
  const handleExportCsv = () => {
    const headers = ["SP_ID", "Name", "Service_Type", "Trustee_ID"];
    const rows = filtered.map((sp) => [
      sp.sp_ID || sp.SP_ID || "",
      sp.name || sp.Name || "",
      sp.service_Type || sp.Service_Type || "",
      sp.trustee_ID || sp.Trustee_ID || "",
    ]);

    const csv =
      headers.join(",") +
      "\n" +
      rows.map((r) => r.map((c) => `"${String(c).replace(/"/g, '""')}"`).join(",")).join("\n");

    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `service_providers_${new Date().toISOString().slice(0, 10)}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  // Distinct bar colors
  const BAR_COLORS = [
    "#2563eb", // blue
    "#22c55e", // green
    "#eab308", // amber
    "#ef4444", // red
    "#a855f7", // purple
    "#06b6d4", // cyan
    "#f97316", // orange
    "#84cc16", // lime
    "#f43f5e", // rose
    "#14b8a6", // teal
  ];

  return (
    <Container maxWidth="lg" sx={{ py: 3 }}>
      {/* Header */}
      <Box
        sx={{
          mb: 2,
          display: "flex",
          alignItems: "center",
          gap: 2,
          justifyContent: "space-between",
        }}
      >
        <Box sx={{ display: "flex", alignItems: "center", gap: 1.25 }}>
          <SdfIcon icon="action-view-list" />
          <Typography variant="h5" fontWeight={700}>
            Service Provider Records
          </Typography>
        </Box>

        <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
          <TextField
            size="small"
            label="Search by Name"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
          <SdfButton
            action="standard"
            emphasis="secondary"
            onClick={handleExportCsv}
            style={{ display: "inline-flex", gap: 6 }}
            title="Export CSV"
          >
            <SdfIcon icon="action-download" />
            Export
          </SdfButton>
          <SdfButton
            action="standard"
            emphasis="primary"
            onClick={() => setOpen(true)}
            style={{ display: "inline-flex", gap: 8 }}
          >
            <SdfIcon icon="action-add" />
            Add SP
          </SdfButton>
          <SdfButton
            action="standard"
            emphasis="secondary"
            onClick={handleLogout}
            style={{ display: "inline-flex", gap: 6 }}
          >
            <SdfIcon icon="action-logout" />
            Logout
          </SdfButton>
        </Box>
      </Box>

      {/* Mini dashboard */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} sm={6} md={2.4}>
          <SdfCard>
            <SdfCardHeader title="Total SPs" />
            <Box sx={{ p: 2, fontSize: 28, fontWeight: 700 }}>{total}</Box>
            <SdfCardFooter>
              <Box sx={{ p: 2, pt: 0, color: "#64748b" }}>Filtered results</Box>
            </SdfCardFooter>
          </SdfCard>
        </Grid>
        <Grid item xs={12} sm={6} md={2.4}>
          <SdfCard>
            <SdfCardHeader title="Service Types" />
            <Box sx={{ p: 2, fontSize: 28, fontWeight: 700 }}>{uniqueServiceTypes}</Box>
            <SdfCardFooter>
              <Box sx={{ p: 2, pt: 0, color: "#06b6d4" }}>Unique values</Box>
            </SdfCardFooter>
          </SdfCard>
        </Grid>
        <Grid item xs={12} sm={6} md={2.4}>
          <SdfCard>
            <SdfCardHeader title="Unique Trustees" />
            <Box sx={{ p: 2, fontSize: 28, fontWeight: 700 }}>{uniqueTrustees}</Box>
            <SdfCardFooter>
              <Box sx={{ p: 2, pt: 0, color: "#a855f7" }}>Linked trustees</Box>
            </SdfCardFooter>
          </SdfCard>
        </Grid>
        <Grid item xs={12} sm={6} md={2.4}>
          <SdfCard>
            <SdfCardHeader title="Linked to Trustee" />
            <Box sx={{ p: 2, fontSize: 28, fontWeight: 700 }}>{linkedPct}%</Box>
            <SdfCardFooter>
              <Box sx={{ p: 2, pt: 0, color: "#22c55e" }}>Have Trustee_ID</Box>
            </SdfCardFooter>
          </SdfCard>
        </Grid>
        <Grid item xs={12} sm={6} md={2.4}>
          <SdfCard>
            <SdfCardHeader title="Top Service Type" />
            <Box sx={{ p: 2, fontSize: 20, fontWeight: 700 }}>{topServiceType}</Box>
            <SdfCardFooter>
              <Box sx={{ p: 2, pt: 0, color: "#f97316" }}>Most common</Box>
            </SdfCardFooter>
          </SdfCard>
        </Grid>
      </Grid>

      {/* Chart: SPs per Service Type */}
      <Box
        sx={{
          p: 2,
          mb: 2,
          borderRadius: 2,
          bgcolor: "#fff",
          border: "1px solid #e5e7eb",
          height: 220,
        }}
      >
        <Typography variant="subtitle1" sx={{ mb: 1.5, display: "flex", alignItems: "center", gap: 1 }}>
          <SdfIcon icon="action-view-reports" />
          SPs per Service Type
        </Typography>
        <ResponsiveContainer width="100%" height={160}>
          <BarChart data={chartData}>
            <XAxis dataKey="name" tick={{ fontSize: 12 }} />
            <YAxis allowDecimals={false} tick={{ fontSize: 12 }} />
            <Tooltip />
            <Bar dataKey="value">
              {chartData.map((entry, idx) => (
                <Cell key={`cell-${entry.name}`} fill={BAR_COLORS[idx % BAR_COLORS.length]} />
              ))}
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Box>

      {/* Table */}
      <Box sx={{ borderRadius: 2, bgcolor: "#fff", border: "1px solid #e5e7eb" }}>
        <div style={{ maxHeight: 480, overflow: "auto" }}>
          <Table stickyHeader>
            <TableHead>
              <TableRow>
                <TableCell>SP_ID</TableCell>
                <TableCell>Name</TableCell>
                <TableCell>Service Type</TableCell>
                <TableCell>Trustee_ID</TableCell>
                <TableCell align="right">Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filtered.length > 0 ? (
                filtered
                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  .map((sp) => {
                    const id = sp.sp_ID || sp.SP_ID;
                    return (
                      <TableRow key={id}>
                        <TableCell>{id}</TableCell>
                        <TableCell>{sp.name || sp.Name}</TableCell>
                        <TableCell>{sp.service_Type || sp.Service_Type}</TableCell>
                        <TableCell>{sp.trustee_ID || sp.Trustee_ID}</TableCell>
                        <TableCell align="right" style={{ whiteSpace: "nowrap" }}>
                          <SdfButton
                            size="small"
                            action="standard"
                            emphasis="secondary"
                            onClick={() => handleEdit(sp)}
                            style={{ marginRight: 6, display: "inline-flex", gap: 6, padding: "2px 8px" }}
                          >
                            <SdfIcon icon="action-edit" />
                            Edit
                          </SdfButton>
                          <SdfButton
                            size="small"
                            action="standard"
                            emphasis="secondary"
                            onClick={() => handleDelete(id)}
                            style={{ display: "inline-flex", gap: 6, padding: "2px 8px" }}
                          >
                            <SdfIcon icon="action-delete" />
                            Delete
                          </SdfButton>
                        </TableCell>
                      </TableRow>
                    );
                  })
              ) : (
                <TableRow>
                  <TableCell colSpan={5} align="center">
                    No records found
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>

        {/* Pagination */}
        <TablePagination
          rowsPerPageOptions={[5, 10, 25]}
          component="div"
          count={filtered.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={(e, newPage) => setPage(newPage)}
          onRowsPerPageChange={(e) => {
            setRowsPerPage(parseInt(e.target.value, 10));
            setPage(0);
          }}
        />
      </Box>

      {/* Modal Form */}
      <Dialog open={open} onClose={() => setOpen(false)} fullWidth maxWidth="sm">
        <DialogTitle>{editId ? "Edit Service Provider" : "Add Service Provider"}</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            label="Name"
            margin="normal"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
          />
          <TextField
            fullWidth
            label="Service Type"
            margin="normal"
            value={form.serviceType}
            onChange={(e) => setForm({ ...form, serviceType: e.target.value })}
          />
          <TextField
            fullWidth
            label="Trustee ID"
            margin="normal"
            value={form.trusteeId}
            onChange={(e) => setForm({ ...form, trusteeId: e.target.value })}
          />
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 2 }}>
          <SdfButton
            action="standard"
            emphasis="secondary"
            onClick={() => setOpen(false)}
            style={{ display: "inline-flex", gap: 6 }}
          >
            <SdfIcon icon="action-close" />
            Cancel
          </SdfButton>
          <SdfButton
            action="standard"
            emphasis="primary"
            onClick={handleSave}
            style={{ display: "inline-flex", gap: 6 }}
          >
            <SdfIcon icon="action-save" />
            Save
          </SdfButton>
        </DialogActions>
      </Dialog>
    </Container>
  );
}